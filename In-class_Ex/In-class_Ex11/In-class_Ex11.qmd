---
title: "In-class Exercise 11: Geographically Weighted Regression"
author: "Pan Mingwei"
date: "November 4, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

::: callout-note
-   Fixed distance vs Adaptive distance

    -   Fixed distance =\> we define the fixed bandwidth in meters.

    -   Adaptive distance =\> we define the number of data point, instead of meters.
:::

# Loading R package

```{r}
pacman::p_load(tidyverse, sf, tmap, httr, performance)
```

# Importing Data 

The code chunk below import multiple file and append them into a single tibble data frame.

```{r}
folder_path <- "data/aspatial"
file_list <- list.files(path = folder_path,
                        pattern = "^realis.*\\.csv$",
                        full.names = TRUE)

# realise_data <- file_list %>%
#   map_dfr(read.csv)

# To avoid R removing the leadin 0 in the postal code
realise_data <- file_list %>%
  map_dfr(~ read.csv(.x, colClasses = c("Postal.Code" = "character")))
```

```{r}
str(realise_data)
```

# Wrangling Data

Notice that the Sale Date and Postal Code are in wrong format.

```{r}
condo_resale <- realise_data %>%
  mutate(`Sale.Date` = dmy(`Sale.Date`)) %>%
  filter(`Type.of.Sale` == "Resale" &
           `Property.Type` == "Condominium")
```

# Geocoding

```{r}
postcode <- unique(condo_resale$Postal.Code)
```

```{r}
#| eval: false
url <- "https://onemap.gov.sg/api/common/elastic/search"
found <- data.frame()
non_found <- data.frame()

for (postcode in postcode) {
  query <- list('searchVal'=postcode,'returnGeom'='Y',
                'getAddrDetails'='Y', 'pageNum'='1')
  res <- GET(url, query=query)
  
  if((content(res)$found)!=0){
    found <- rbind(found, data.frame(content(res))[4:13])
  }else {non_found = data.frame(postcode)}
}
```

```{r}
#| eval: false
write_rds(found,"data/rds/found.rds")
```

```{r}
found <- read_rds("data/rds/found.rds")
```

```{r}
found <- found %>%
  select(c(6:8)) %>%
  rename(POSTAL = `results.POSTAL`,
          XCOORD = `results.X`,
          YCOORD = `results.Y`)
```

## Join tables

```{r}
condo_resale_geocoded = left_join(
  condo_resale, found,
  by = c('Postal.Code' = 'POSTAL')
)
```

## Converting to SF

```{r}
condo_resale_sf <- st_as_sf(condo_resale_geocoded,
                            coords = c("XCOORD","YCOORD"),
                            crs=3414)
```

## Cleaning Spatial Data

Check if there is overlaying location.

```{r}
overlapping_points <- condo_resale_sf %>%
   mutate(overlap = length(st_equals(., .)) > 1)
```

## Spatial jittering

```{r}
condo_resale_sf <- condo_resale_sf %>%
  st_jitter(amount = 2)
```

```{r}
head(condo_resale_sf)
```
