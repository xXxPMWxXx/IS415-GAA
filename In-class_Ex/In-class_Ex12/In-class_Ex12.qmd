---
title: "In-class Exercise 12"
author: "Pan Mingwei"
date: "November 11, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

::: callout-note
-   **Predictive Model VS Forecasting Model**

    -   Predictive Model

        -   Do not consider time as the factor, no trending.

        -   Time independent

    -   Forecasting Model

        -   Used to estimate future value based on historical data, often consider time as a factor.

-   **Recursive Partitioning**

    -   Decision Tree =\> categorical output

    -   Regression Tree =\> Continuous(numeric) output
:::

# Getting Started

## Import the packages

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, 
               tmap, rsample, yardstick, tidyverse, 
               knitr, kableExtra, spatialRF)
```

## Preparing Data

```{r}
mdata <- read_rds("data/rds/mdata.rds")
```

## Data Sampling

Calibrating predictive models are computational intensive, especially random forest method is used. For quick prototyping, a 10% sample will be selected at random from the data by using the code chunk below.

```{r}
set.seed(1234)
HDB_sample <- mdata %>%
  sample_n(1500)
```

## Checking of overlapping point

```{r}
overlapping_points <- HDB_sample %>%
  mutate(overlap = lengths(st_equals(., .)) >1)
summary(overlapping_points$overlap)
```

## Spatial jitter

```{r}
HDB_sample <- HDB_sample %>%
  st_jitter(amount = 5)
```

# Data Sampling for training/test data 

```{r}
#| eval: false
set.seed(1234)
resale_split <- initial_split(HDB_sample,
                              prop = 6.67/10,)
train_data <- training(resale_split)
test_data <- testing(resale_split)
```

```{r}
#| eval: false
write_rds(train_data, "data/rds/train_data.rds")
write_rds(test_data, "data/rds/test_data.rds")
```

```{r}
train_data <- read_rds("data/rds/train_data.rds")
test_data <-  read_rds("data/rds/test_data.rds")
```

## Multicollinearity check

```{r,fig.width=12,fig.height=10}
mdata_nogeo <- mdata %>%
  st_drop_geometry()
ggstatsplot::ggcorrmat(mdata_nogeo[,2:17], matrix.type = "full")
```

# Building a non-spatial multiple linear regression

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
summary(price_mlr)
```

# Predictive Modelling with gwr

## Computing bw

```{r}
gwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=train_data,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

## Model Calibration

```{r}
gwr_ad <- gwr.basic(formula = resale_price ~
                            floor_area_sqm + storey_order +
                            remaining_lease_mths + PROX_CBD + 
                            PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                            WITHIN_1KM_PRISCH,
                          data=train_data,
                          bw=20, 
                          kernel = 'gaussian', 
                          adaptive=TRUE,
                          longlat = FALSE)
```

## Computing test data bw

```{r}
gwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=test_data,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

## Predicting with test data

```{r}
gwr_pred <- gwr.predict(formula = resale_price ~
                          floor_area_sqm + storey_order +
                          remaining_lease_mths + PROX_CBD + 
                          PROX_ELDERLYCARE + PROX_HAWKER + 
                          PROX_MRT + PROX_PARK + PROX_MALL + 
                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
                          WITHIN_1KM_PRISCH, 
                        data=train_data, 
                        predictdata = test_data, 
                        bw=20, 
                        kernel = 'gaussian', 
                        adaptive=TRUE, 
                        longlat = FALSE)
```

## Saving predicted values

```{r}
gwr_pred_df <- as.data.frame(
  gwr_pred$SDF$prediction) %>%
  rename(gwr_pred = "gwr_pred$SDF$prediction")
```

# Predictive Modelling with RF method

## Data preparation

```{r}
coords <- st_coordinates(HDB_sample)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```

To drop geometry column of the sf data.frame by using `st_drop_geometry()` of sf package.

```{r}
train_data_nogeom <- train_data %>% 
  st_drop_geometry()
```

## Calibrating RF model

```{r}
set.seed(1234)
rf <- ranger(resale_price ~ floor_area_sqm + storey_order + 
               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + 
               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + 
               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
               WITHIN_1KM_PRISCH,
             data=train_data_nogeom)
```

## Preparing the test data

```{r}
test_data_nogeom <- cbind(
  test_data,coords_test) %>%
  st_drop_geometry()
```

## Predicting with rf

```{r}
rf_pred <- predict(rf, data = test_data_nogeom)
```

## Saving the predicted values

```{r}
rf_pred_df <- as.data.frame(rf_pred$predictions) %>%
  rename(rf_pred = "rf_pred$predictions")
```

# Predictive Modelling with SpatialML

```{r}
set.seed(1234)
grf_ad <- grf(formula = resale_price ~ floor_area_sqm + storey_order +
                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +
                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                       WITHIN_1KM_PRISCH,
                     dframe=train_data_nogeom, 
                     bw=20,
                     kernel="adaptive",
                     coords=coords_train)
```

## Predicting with the test data

```{r}
grf_pred <- predict.grf(grf_ad, 
                           test_data_nogeom, 
                           x.var.name="X",
                           y.var.name="Y", 
                           local.w=1,
                           global.w=0)
```

## Saving the predicted values

Convert the output from grf_pred into a data.frame.

```{r}
grf_pred_df <- as.data.frame(grf_pred)
```

# Model Comparison

```{r}
test_data_pred <- test_data %>%
  select(resale_price) %>%
  cbind(gwr_pred_df) %>%
  cbind(rf_pred_df) %>%
  cbind(grf_pred_df)
```

## Transposing Data

```{r}
test_longer <- test_data_pred %>%
  st_drop_geometry() %>%
  pivot_longer(cols = ends_with("pred"),
               names_to = "model",
               values_to = "predicted")
```

## Renaming

```{r}
model_labels <- c(
  gwr_pred = "gwr",
  rf_pred = "Random Forest",
  grf_pred = "gwRF"
)

test_longer <- test_longer %>%
  mutate(model = recode (
    model, !!!model_labels))
```

## Computing rmse

```{r}
rmse_longer <- test_longer %>%
  group_by(model) %>%
  rmse(truth = resale_price,
       estimate = predicted) %>%
  rename(rmse = .estimate) %>%
  select(model, rmse)
```

```{r}
rmse_results <- rmse_longer
```

# Model Comparison Plots

```{r}
ggplot(rmse_results,
       aes(x = reorder(model, rmse),
           y = rmse,
           fill = "skyblue")) +
  geom_bar(stat = "identity",
           fill = "skyblue",
           color = "black",
           width = 0.7) +
  labs(title = "RMSE Comparison of Models",
       y = "RMSE",
       x = "Model") +
  theme_minimal()
```

# Scatter Plots

```{r}
test_longer <- test_longer %>%
  left_join(rmse_results,
            by = "model")

ggplot(data = test_longer,
       aes(x = predicted,
           y = resale_price)) +
  facet_wrap(~ model) +
  geom_point() +
  geom_text(data = test_longer,
            aes(x = Inf, y = Inf,
                label = paste("RMSE:", round(rmse,2))),
            hjust = 1.1, vjust = 1.1,
            color = "black", size=4)
```

# Variable importance

```{r}
var_imp <- data.frame(
  Variable = names(grf_ad$Global.Model$variable.importance),
  Importance = grf_ad$Global.Model$variable.importance
)
```

```{r}
ggplot(var_imp, aes(x = reorder(Variable, Importance),
                    y = Importance)) +
  geom_bar(stat = "identity",
           fill = "skyblue") +
  coord_flip() +
  labs(
    title = "Variable IMportance from Ranger Model",
    x = "Variable",
    y = "Importance"
  ) +
    theme_minimal()
```
