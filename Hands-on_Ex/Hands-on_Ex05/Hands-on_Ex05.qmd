---
title: "Hands-On Exercise 05: Spatial Weights and Applications"
author: "Pan Mingwei"
date: "September 13, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# 1. Overview

In this hands-on exercise, I will learn how to compute spatial weights using R and able to:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute spatial weights using appropriate functions of **spdep** package, and

-   calculate spatially lagged variables using appropriate functions of **spdep** package.

# 2. The Study Area and Data

Two data sets will be used in this hands-on exercise, they are:

-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

## 2.1 Getting Started

Before get started,to ensure that **spdep**, **sf**, **tmap** and **tidyverse** packages of R are currently installed in R.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse,knitr)
```

# 3. Getting the Data Into R Environment

In this section, I will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.

## 3.1 Import Shapefile into R Environment

Using `st_read()` of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial",
                 layer = "Hunan")
```

## 3.2 Import CSV File into R Environment

Next, import *Hunan_2012.csv* into R by using *`read_csv()`* of **readr** package. The output is R dataframe class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

To the class type of **hunan2012**.

```{r}
class(hunan2012)
```

## 3.3 Performing Relational Join

To update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.

```{r}
test <- left_join(hunan,hunan2012)
```

```{r}
colnames(test)
```

Col 7 =\> County

Col 15 =\> GDPPC

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

# 4. Visualising Regional Development Indicator

Now, to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *`qtm()`* of **tmap** package.

```{r,fig.width=12, fig.height=10}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# 5. Computing Contiguity Spatial Weights

In this section, I will learn how to use [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.

In the documentation, there is a “queen” argument that takes TRUE or FALSE as options. If do not specify this argument the default is set to TRUE, that is, if don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

## 5.1 Computing (QUEEN) Contiguity Based Neighbours

To compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.

For each polygon in our polygon object, *wm_q* lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.

We can retrive the county name of Polygon ID=1 by using the code chunk below:

```{r}
hunan$County[1]
```

The output reveals that Polygon ID=1 is Anxiang county.

To reveal the county names of the five neighboring polygons, the code chunk will be used:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

To retrieve the GDPPC of these five countries.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The above output shows the GDPPC of the five nearest neighbours based on Queen's method.

To display the complete weight matrix by using *str()*.

```{r}
str(wm_q)
```

Be warned: The output might cut across several pages.

## 5.2 Creating (ROOK) Contiguity Based Neighbours

To compute Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

::: callout-note
The summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one neighbours.
:::

## 5.3 Visualising Contiguity Weights

To create a connectivity graph from polygons, we first need points, typically derived from polygon centroids. Using the sf package in R, we calculate these centroids before constructing the graph. However, we must extract the coordinates of these centroids into a separate data frame. Instead of directly applying `st_centroid` to the geometry column of the us.bound object, we use the **map_dbl** function from the **purrr** package. This function applies st_centroid to each element in the geometry column, returning a vector with centroid coordinates. We then access the longitude and latitude values by indexing the results. Longitude values are extracted by accessing the first value of each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

Do the same for latitude with one key difference.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Use `cbind` to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

Check the coords.

```{r}
head(coords)
```

### 5.3.1 Plotting Queen Contiguity Based Neighbours Map

```{r,fig.width=12, fig.height=10}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### 5.3.2 plotting Rook Contiguity Based Neighbours Map

```{r,fig.width=12,fig.height=10}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### 5.3.3 Plotting Both Queen and Rook Contiguity Based Neighbours Maps

```{r,fig.width=12,fig.height=10}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# 6. Computing Distance Based Neighbours

In this section, I will learn how to derive distance-based weight matrices by using `dnearneigh()` of **spdep** package.

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

## 6.1 Determine the Cut-off Distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

## 6.2 Computing Fixed Distance Weight Matrix

To compute the distance weight matrix by using *`dnearneigh()`*.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

::: callout-note
The average number of links: 3.681818 refers to the average number of neighbouring regions each region has. Calculated using **Number of nonzero links(324)** divided by **Number of regions(88)**.
:::

Using `str()` to display the content of **wm_d62** weight matrix.

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine [*table()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/table) and [*card()*](https://r-spatial.github.io/spdep/reference/card.html) of spdep.

```{r}
table(hunan$County, card(wm_d62))
```

To check the number of connected components exist within the neighbor list `wm_d62`. There are two field in **n_comp**, which are **nc** and **comp.id**.

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

The above output means, there is 1 component with 88 regions in it.

### 6.2.1 Plotting Fixed Distance Weight Matrix

```{r,fig.width=12,fig.height=10}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

To plot both of them next to each other.

```{r,fig.width=12,fig.height=10}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

## 6.3 Computing Adaptive Distance Weight Matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

To display the content of the matrix by using ***str()***.

```{r}
str(knn6)
```

::: callout-note
Notice that each county now has 6 neighbours.
:::

### 6.3.1 Plotting Distance Based Neighbours

Plot the weight matrix.

```{r,fig.width=12,fig.height=10}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# 7. Weights Based on IDW

In this section, focus on how to derive a spatial weight matrix based on Inversed Distance method.

First, we will compute the distances between areas by using *`nbdists()`* of **spdep**.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

# 8. Row-Standardised Weight Matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

To see the weight of the first polygon’s eight neighbors type:

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.

Using the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

# 9. Application of Spatial Weight Matrix

In this section, focus on how to create four different spatial lagged variables, they are:

-   spatial lag with row-standardized weights,

-   spatial lag as a sum of neighbouring values,

-   spatial window average, and

-   spatial window sum.

## 9.1 Spatial Lag with Row-Standardised Weights

Finally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as **spatially lagged values**.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Recalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

::: callout-note
**Spatial lag** with row-standardized weights allows we to compute the average value of GDPPC for the region’s neighbors, accounting for spatial relationships. This helps us in understanding spatial dependence and how regions are influenced by their neighbors’ characteristics.
:::

To append the spatially lag GDPPC values onto hunan sf data frame.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

Plot both the GDPPC and spatial lag GDPPC for comparison.

```{r,fig.width=12,fig.height=10}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

## 9.2 Spatial Lag as a Sum of Neightboring Values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.

We start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use `lag.listw` to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

Check the result.

```{r}
lag_sum
```

::: callout-note
-   **Spatial lag** refers to the effect or influence that the neighboring regions have on a given region. Instead of looking at a region in isolation, spatial lag helps us account for spatial dependencies by considering the neighboring regions’ values.

-   **Spatial lag as a sum** refers the sum of the GDPPC values for all neighboring regions, calculated based on binary spatial weights.
:::

Next, we will append the *lag_sum GDPPC* field into `hunan` sf data frame.

```{r}
hunan <- left_join(hunan, lag.res)
```

Plot both GDPPC and Spatial Lag Sum GDPPC.

```{r,fig.width=12,fig.width=10}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

## 9.3 Spatial Window Average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

::: callout-note
Notice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909
:::

Checking neighbour list of area\[1\].

```{r}
wm_qs[[1]]
```

Notice now it has 6 neighbours instead of five.

Obtain weights with `nb2listw()`.

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

To create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, hunan$GDPPC)
lag_w_avg_gpdpc
```

Convert the lag variable listw object into a data.frame by using *`as.data.frame()`*.

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

::: callout-note
The third command line on the code chunk above renames the field names of *lag_wm_q1.res* object into *NAME_3* and *lag_window_avg GDPPC* respectively.
:::

To append *lag_window_avg GDPPC* values onto ***hunan*** sf data.frame by using *`left_join()`* of **dplyr** package.

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of **Knitr** package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

*`qtm()`* of **tmap** package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.

```{r,fig.width=12,fig.height=10}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

## 9.4 Spatial Window Sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights.

To add the diagonal element to the neighbour list, we just need to use include.self() from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Next, we will assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

Notice it have 6 neighbours.

Using *`nb2listw()`* and *`glist()`* to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Compute the lag variable with `lag.listw()`.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Convert the lag variable listw object into a data.frame by using *as.data.frame()*.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Append the column.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

To compare the values of lag GDPPC and Spatial window average, using `kable()` of Knitr package.

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Using qtm() of tmap to plot the map.

```{r,fig.width=12,fig.height=10}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

# 10. References

Tutorial provided by Professor Kam Tin Seong (SMU) for IS415 - Geospatial Analytics and Application

Link: <https://r4gdsa.netlify.app/chap08.html#spatial-lag-as-a-sum-of-neighboring-values>

-   [Creating Neighbours using sf objects](https://cran.r-project.org/web/packages/spdep/vignettes/nb_sf.html)
