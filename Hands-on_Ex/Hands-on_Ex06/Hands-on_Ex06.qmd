---
title: "Hands-on Exercise 06: Global/Local Measures of Spatial Autocorrelation"
author: "Pan Mingwei"
date: "September 19, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1. Overview

In this hands-on exercise, I will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) and Local Measures of Spatial Autocorrelation (LMSA) by using **spdep** package.

## 1.1 What is Global Measures of Spatial Autocorrelation (GMSA)

Evaluate the overall degree of spatial dependence (autocorrelation) across the entire study area.

-   **Moran’s I**: A widely used global indicator that measures whether a variable is spatially clustered, dispersed, or randomly distributed.

    -   **I \> 0**: Clustered, observation tend to be similar.

    -   **I \< 0**: Dispersed, observations tend to be dissimilar.

    -   **approximately zero**: observations are arranged randomly over space.

-   **Geary’s C**: Similar to Moran’s I but more sensitive to local differences.

    -   C \> 1: Dispersed, observations tend to be dissimilar.

    -   C \< 1: Clustered, observations tend to be similar.

    -   C = 1: Observations are arranged randomly over space.

By the end of this hands-on exercise, I will be able to :

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep**package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   provide statistically correct interpretation of GSA statistics.

## 1.2 What is Local Measures of Spatial Autocorrelation (LMSA)

Assess the degree of spatial autocorrelation at a local, rather than global, scale to identify clusters or outliers in specific areas.

-   **Local** **Moran’s I:** Measures how much a given location contributes to the overall Moran’s I, identifying local clusters and outliers.

    -   **Local cluster**: Significant and **positive** if location i is associated with relatively **high values** of the surrounding locations.

    -   **Local outlier**: Significant and **negative** if location i is associated with relatively **low values** in surrounding locations.

-   **Getis-Ord Gi\***:Measures local “hotspots” and “cold spots” where values are significantly higher or lower than expected.

    -   **Hot spot area**: Significant and **positive** if location i is associated with relatively **high values** of the surrounding locations.

    -   **Cold spot area**: Significant and **negative** if location i is associated with relatively **low values** in surrounding locations.

By the end of the hands-on, I will be able to :

-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **spdep** package;

-   compute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **spdep** package; and

-   to visualise the analysis output by using **tmap** package.

# 2. Getting Started

## 2.1 The Analytical Question

In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is **No**. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of [Hunan Provice](https://en.wikipedia.org/wiki/Hunan), People Republic of China.

## 2.2 The Study Area and Data

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

## 2.3 Setting the Analytical Tools

-   **sf** is use for importing and handling geospatial data in R,

-   **tidyverse** is mainly use for wrangling attribute data in R,

-   **spdep** will be used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   **tmap** will be used to prepare cartographic quality chropleth map.

To check if the packages have been installed in R and load the packages into the current R environment.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

# 3. Load the Data into R Environment

## 3.1 Import shapefile

Using `st_read()` of sf package to import Hunan shapefile into R. It will be in sf object.

```{r}
hunan_sf <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

## 3.2 Import CSV File

Using `read_csv()` of readr package. The output is R data frame class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## 3.3 Performing Relational Join

Using `left_join()` of **dplyr** package to update the attribute table of hunan_sf with the attribute fields of hunan2012 dataframe.

```{r}
hunan_sf <- left_join(hunan_sf,hunan2012) %>%
  dplyr::select(1:4, 7, 15)
```

## 3.4 Visualising Regional Development Indicator

To prepare a basemap and a choropleth map showing the distribution of GDPPC 2021 using `qtm()` of **tmap** package.

```{r,fig.width=12,fig.height=10}
equal <- tm_shape(hunan_sf) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan_sf) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

# 4. Global Measures of Spatial Autocorrelation

This section, I will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.

## 4.1 Computing Contiguity Spatial Weights

Before we can compute the global spatial autocorrelation statistics, we need to **construct a spatial weights** of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

In the code chunk below, [`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

More specifically, the code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan_sf, 
                queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit(85) has 11 neighbours. There are two area units(30,65) with only one neighbours.

## 4.2 Row-Standardised Weights Matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

```{r}
class(wm_q)
```

::: callout-note
-   The input of [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.

-   *style* can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.
:::

# 5. Global Measures of Spatial Autocorrelation: Moran's I

In this section, I will learn how to perform Moran's I statistics testing by using `moran.test()` of **spdep**.

## 5.1 Maron's I Test

Using `moran.test()` of **spdep**.

```{r}
moran.test(hunan_sf$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

::: callout-note
-   I = 0.3007, indicates **positive spatial autocorrelation**, meaning that areas with similar values of GDPPC are geographically clustered together.

-   Expectation = -0.01149, indicates that for null hypothesis of no spatial autocorrelation . But the fact that the observed statistic(0.3007) is significantly higher than the expectation value suggests evidence against the null hypothesis.

-   p-value = 1.095e-06, indicate that the null hypothesis can be rejected.
:::

## 5.2 Computing Monte Carlo Moran's I

The code chunk below performs permutation test for Moran’s I statistic by using [`moran.mc()`](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan_sf$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

::: callout-note
-   Statistic = 0.30075, indicates a postive spatial autocorrelation, meaning that regions with similar GDPPC values are more likely to located near each other.

-   p-value = 0.001(smaller than 0.05), indicates that we can reject the null hypothesis(that locations do not depend on GDPPC values at other locaitons)
:::

## 5.3 Visualising Monte Carlo Moran's I

We can use `hist()` and `abline()` of R Graphics to examine the simulated Moran's I test statistics in greater details.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

::: callout-note
-   Notices that the distribution of the simulated Moran’s I values is primarily skewed toward the negative side, suggesting that the data points exhibit a dispersed spatial pattern.
:::

```{r}

bperm_df <- data.frame(simulated_morans_I = bperm$res)

# Plot the histogram using ggplot2
ggplot(bperm_df, aes(x = simulated_morans_I)) +
  geom_histogram(binwidth = diff(range(bperm_df$simulated_morans_I)) / 20, 
                 fill = "grey", color = "black") + 
  geom_vline(xintercept = 0, color = "red", linetype = "solid", size = 1) +
  labs(x = "Simulated Moran's I", 
       y = "Frequency", 
       title = "Histogram of Simulated Moran's I Values")
```

# 6. Global Measures of Spatial Autocorrelation: Geary’s C

## 6.1 Geary's C test

The code chunk below performs Geary’s C test for spatial autocorrelation by using [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(hunan_sf$GDPPC, listw=rswm_q)
```

::: callout-note
-   C = 0.6907223 (\< 1), indicates that regions with similar GDPPC values are more likely to located near each other(clustered).

-   p-value = 0..0001526, means the spatial autocorrelation is unlikely to have occurred by random, which we can reject the null hypothesis.
:::

## 6.2 Computing Monte Carlo Geary’s C

To performs permutation test for Geary’s C statistic by using [`geary.mc()`](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234)
bperm=geary.mc(hunan_sf$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

::: callout-note
-   C = 0.69072, indicates that regions with similar GDPPC values are more likely to located near each other(clustered).

-   p-value = 0.001, indicates we can reject the null hypothesis(random).
:::

## 6.3 Visualising the Monte Carlo Geary’s C

plot a histogram to reveal the distribution of the simulated values.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

::: callout-note
-   The histogram appear to follow a normal distribution.
:::

```{r}
bperm_df <- data.frame(simulated_morans_I = bperm$res)

ggplot(bperm_df, aes(x = simulated_morans_I)) +
  geom_histogram(binwidth = diff(range(bperm_df$simulated_morans_I)) / 20, 
                 fill = "grey", color = "black") + 
  geom_vline(xintercept = 1, color = "red", linetype = "solid", size = 1) +
  labs(x = "Simulated Geary C", 
       y = "Frequency", 
       title = "Histogram of Simulated Geary C Values")
```

# 7. Spatial Correlogram

Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

## 7.1 Compute Moran's I correlogram

Using [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan_sf$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

::: callout-note
-   Lag 1 and 2: with I value 0.3 and 0.2, indicates strong positive spatial autocorrelation , means the regions are similar GDPPC for the Lag 1 and 2. (clustering)

-   L3 and 4, with I value 0.06 and 0.02, indicates a weaker positive spatial autocorrelation compare with lag 1 and 2. (Notice the p-value also increased)

-   L5 and 6, with I value -0.15 and -0.11, indicates regions with dissimilar GDPPC are more likely to be neighbors. (dispersed)
:::

## 7.2 Compute Geary’s C correlogram and plot

using `sp.correlogram()` of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan_sf$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

```{r}
print(GC_corr)
```

::: callout-note
-   Lag 1 and 2, with C value of 0.69 and 0.75, meaning that nearby regions tend to habe similar GDPPC values(clustered).

-   Lag 3 , 4 and 6, with C value of 0.93 ,1.009 and 1.07, very close to 1, meaning no significant spatial autocorrelation at lag 3 and 4.

-   Lag 5, with C value of 1.2 meaning neighboring regions are more liekly to have dissimilar GDPPC value.
:::

# 8. Local Indicators of Spatial Association (LISA)

## 8.1 Computing Contiguity Spatial Weights

Before we can compute the local spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

Below code chunk, we are using poly2nb of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

To perform Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan_sf, 
                queen=TRUE)
summary(wm_q)
```

::: callout-note
The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.
:::

## 8.2 Row-Standardised Weights Matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

## 8.3 Computing Local Moran's I

Using `localmoran()` function of **spdep** package. It computes ***li*** values, given a set of ***zi*** value and a listw object providing neightbour weighting information for the polygon associated with the ***zi*** value

```{r}
fips <- order(hunan_sf$County)
localMI <- localmoran(hunan_sf$GDPPC, rswm_q)
head(localMI)
```

::: callout-note
-   Ii: the local Moran’s I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic
:::

To list the content of the local Moran matrix using `printCoefmat()`.

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan_sf$County[fips]),
  check.names=FALSE)
```

### 8.3.1 Mapping the local Moran's I

Before mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan_sf SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called *hunan_sf.localMI*.

```{r}
hunan_sf.localMI <- cbind(hunan_sf,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

### 8.3.2 Mapping the local Moran's I values

Plot the local Moran's I value (Ii field) using **tmap** package.

```{r}
tm_shape(hunan_sf.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

### 8.3.3 Mapping local Moran’s I p-values

As from the above plot, we can see there are both positive and negative Ii value. Hence, it will be useful to consider the p-values for each of these values as well.

```{r}
tm_shape(hunan_sf.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

### 8.3.4 Mapping both local Moran’s I values and p-values

For better interpretation, it is better to plot both plot side by side.

```{r,fig.width=12,fig.height=10}
localMI.map <- tm_shape(hunan_sf.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan_sf.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

::: callout-note
-   Notice that some area, with negative Ii value and with very low p-value(\< 0.001). This indicates that the observed spatial relationship is unlikely due to random chance. So we can say these area are spatial outlier.

-   However, there are also area with negative Ii value and with a high p-value(\> 0.1). This indicates that although the area might appear to be a spatial outlier, but the result is not statistically significant and it could have occurred by chance. Hence, no strong conclusion can be drawn about these areas.
:::

# 9. Creating a LISA Cluster Map

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

## 9.1 Plotting Moran Scatter-plot

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

The code chunk below plots the Moran scatterplot of GDPPC 2012 by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.

```{r,fig.width=12,fig.height=10}
nci <- moran.plot(hunan_sf$GDPPC, rswm_q,
                  labels=as.character(hunan_sf$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

::: callout-note
Notice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.
:::

## 9.2 Plotting Moran scatterplot with standardised variable

First we will use [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.

```{r}
hunan_sf$Z.GDPPC <- scale(hunan_sf$GDPPC) %>% 
  as.vector 
```

as.vector =\> to chance the data type into vector that will map neatly into dataframe.

```{r,fig.width=12,fig.height=10}
nci2 <- moran.plot(hunan_sf$Z.GDPPC, rswm_q,
                   labels=as.character(hunan_sf$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

## 9.3 Preparing LISA map classes

The code chunks below show the steps to prepare a LISA cluster map.

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Next, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.

```{r}
hunan_sf$lag_GDPPC <- lag.listw(rswm_q, hunan_sf$GDPPC)
DV <- hunan_sf$lag_GDPPC - mean(hunan_sf$lag_GDPPC)     
```

This is follow by centering the local Moran’s around the mean.

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    
```

Next, we will set a statistical significance level for the local Moran.

```{r}
signif <- 0.05       
```

These four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.

```{r}
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4      
```

Lastly, places non-significant Moran in the category 0.

```{r}
quadrant[localMI[,5]>signif] <- 0
```

In fact, we can combined all the steps into one single code chunk as shown below:

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
hunan_sf$lag_GDPPC <- lag.listw(rswm_q, hunan_sf$GDPPC)
DV <- hunan_sf$lag_GDPPC - mean(hunan_sf$lag_GDPPC)     
LM_I <- localMI[,1]   
signif <- 0.05       
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4    
quadrant[localMI[,5]>signif] <- 0
```

## 9.5 Plotting LISA map

To plot the LISA map.

```{r}
hunan_sf.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan_sf.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

For effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.

To create such visualisation.

```{r,fig.width=12,fig.height=10}
gdppc <- qtm(hunan_sf, "GDPPC")

hunan_sf.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan_sf.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap,
             asp=1, ncol=2)
```

With I map and p-value map.

```{r,fig.width=12,fig.height=10}
tmap_arrange(localMI.map, pvalue.map,
             asp=1, ncol=2)
```

::: callout-note
-   Notice that the p-value map and the LISA have a strong co-relation, as for the areas that with low p-value. The LISA map will tend to have significant results(with color).
:::

# 10 Hot Spot and Cold Spot Area Analysis

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

The term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).

## 10.1 Getis and Ord’s G-Statistics

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

## 10.2 Deriving distance-based weight matrix

First, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

### 10.2.1 Deriving the centroid

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running *st_centroid()* on the sf object: **us.bound**. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be *st_centroid()*. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation

To get our longitude values we map the *st_centroid()* function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan_sf$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan_sf$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

### 10.2.2 Determine the cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

::: callout-note
The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.
:::

### 10.2.3 Computing fixed distance weight matrix

Now, we will compute the distance weight matrix by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Next, *`nb2listw()`* is used to convert the nb object into spatial weights object.

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

## 10.3 Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Next, *`nb2listw()`* is used to convert the nb object into spatial weights object

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

# 11. Computing Gi Statistics

## 11.1 Gi statistics using fixed distance

```{r}
fips <- order(hunan_sf$County)
gi.fixed <- localG(hunan_sf$GDPPC, wm62_lw)
gi.fixed
```

The output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

Next, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.

```{r}
hunan_sf.gi <- cbind(hunan_sf, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

In fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. *gi.fixed*) into r matrix object by using *as.matrix()*. Next, *cbind()* is used to join hunan\@data and *gi.fixed* matrix to produce a new SpatialPolygonDataFrame called *hunan.gi*. Lastly, the field name of the gi values is renamed to *gstat_fixed* by using *rename()*.

## 11.2 Mapping Gi values with fixed distance weights

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r,fig.width=12,fig.height=10}
gdppc <- qtm(hunan_sf, "GDPPC")

Gimap <-tm_shape(hunan_sf.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

::: callout-note
-   We can see that the area with high GDPPC neighbours, will be relatively with a higher Gi value (hot spot). Where the area with a lower high GDPPC neighbours are most likely are plot as cold spot.
:::

## 11.3 Gi statistics using adaptive distance

The code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e *knb_lw*).

```{r}
fips <- order(hunan_sf$County)
gi.adaptive <- localG(hunan_sf$GDPPC, knn_lw)
hunan_sf.gi <- cbind(hunan_sf, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

## 11.4 Mapping Gi values with adaptive distance weights

To visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values.

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r,fig.width=12, fig.height=10}
gdppc<- qtm(hunan_sf, "GDPPC")

Gimap <- tm_shape(hunan_sf.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```

::: callout-note
-   With adaptive distance weights, a larger area becomes a hot spot, while a smaller area becomes a cold spot compared to fixed distance weights.
:::

# 12. Reference

Tutorial provided by Professor Kam Tin Seong (SMU) for IS415 - Geospatial Analytics and Application

Link:

-   [Global Measures of Spatial Autocorrelation](https://r4gdsa.netlify.app/chap09)

-   [Local Measures of Spatial Autocorrelation](https://r4gdsa.netlify.app/chap10)
