---
title: "Hands-On Exercise 02: Thematic Mapping and Geovisualisation with R"
author: "Pan Mingwei"
date: "August 22, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# 1. Overview

Thematic mapping uses map symbols to visualize invisible geographic properties, such as population, temperature, crime rate, and property prices. Geovisualization enhances understanding by graphically representing places, phenomena, or processes, engaging the human eye-brain system for spatial cognition. This hands-on exercise will be on how to create accurate and functional choropleth maps using the **tmap** package in R.

# 2. Packages Used

In this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, four other R packages will be used. They are:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.

Since **readr**, **tidyr** and **dplyr** are part of **tidyverse** package. Therefore, we do not need to install them individually.

```{R}
pacman::p_load(sf,tmap,tidyverse)
```

# 3. Importing Data into R

## 3.1 Datasets

Two data set will be used to create the choropleth map. They are:

-   **Master Plan 2014 Subzone Boundary (Web)** (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.

-   **Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020** in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

## 3.2 Importing Geospatial Data into R

We will using **`st_read()`** function from **`sf`** package to import shape file into R as a data frame named **`mpsz`**.

```{r}
mpsz <- st_read(dsn = "data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP", layer = "MP14_SUBZONE_WEB_PL")
```

To examine the content of **`mpsz`**:

```{R}
mpsz
```

::: callout-note
It will only display the first 10 rows of the data frame, because in R by default, only a limited number of are displayed, often the first 10 rows only.
:::

To display more rows, we can use functions like print() , head() or modifying R's global settings (`Tools > Global > Console`).

```{r}
print(mpsz, n = 20)  # This will print the first 20 rows
head(mpsz, 10) # Default is 6 rows, constraint by the global setting(10 rows) as well
```

## 3.3 Importing Attribute Data into R

Next, we will use **`read_csv()`** function of `readr` package to import  ***respopagsex2011to2020.csv*** file into RStudio and save the file into an R dataframe called ***popdata***.

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

## 3.4 Data Preparation

Before a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables **PA**, **SZ**, **YOUNG**, **ECONOMY** **ACTIVE**, **AGED**, **TOTAL**, **DEPENDENCY**.

-   `PA`: Planning Area,

-   `SZ`: Subzone,

-   `YOUNG`: age group 0 to 4 until age group 20 to 24,

-   `ECONOMY ACTIVE`: age group 25-29 until age group 60-64,

-   `AGED`: age group 65 and above,

-   `TOTAL`: all age group, and

-   `DEPENDENCY`: the ratio between young and aged against economy active group

### 3.4.1 Data Wrangling

The following data wrangling and transformation functions will be used:

-   ***pivot_wider()*** of **`tidyr`** package, and

-   ***mutate()***, ***filter()***, ***group_by()*** and ***select()*** of **`dplyr`** package

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[14])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+
rowSums(.[15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

::: callout-warning
`YOUNG` =\> instead of including col 12 (50_to_54), we should including col 14(5_to_9) from popdata.

`ECONOMY ACTIVE` =\> Instead of from col 7 to 11 and 13 to 15, it should be 7 to 13(until 55_to_59) and col 15(60_to_64)
:::

### 3.4.2 Joining the attribute data and geospatial data

Before we can perform the georelational join, we need to convert the values in `PA` and `SZ` fields to uppercase. This is because the values of `PA` and `SZ` fields are made up of upper- and lowercase. `SUBZONE_N` and `PLN_AREA_N` are in uppercase.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

After convert `PA` and `SZ` field to uppercase, then we can use `left_join()` of **dplyr**  to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020, by = c("SUBZONE_N" = "SZ"))
```

Thing to learn from the code chunk above:

-   *left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

::: callout-tip
RDS files take less space than textual data formats like CSV, JSON(CSV file is about 64MB and RDS file only 1MB). RDS also reads and writes faster than those.
:::

# 4. Choropleth Mapping Geospatial Data Using *`tmap`*

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

Two approaches can be used to prepare thematic map using *tmap*, they are:

-   Plotting a thematic map quickly by using *qtm()*.

-   Plotting highly customisable thematic map by using tmap elements.

## 4.1 Plotting a choropleth map quickly by using *`qtm()`*

The easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

-   *tmap_mode()* with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.

-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)

## 4.2 Creating a choropleth map by using *`tmap`*’s elements

Despite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, **tmap**’s drawing elements should be used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

Next, we will be using `tmap` functions that can be used to plot additional element in the map above.

### 4.2.1 Drawing a base map using `tm_shape()`

The basic building block of **tmap** is *`tm_shape()`* followed by one or more layer elemments such as *`tm_fill()`* and *`tm_polygons()`*`.`

`tm_shape()` is used to define the input data (i.e *mpsz_pop2020*) and *`tm_polygons()`* is used to draw the planning subzone polygons

```{r}
tm_shape(mpsz_pop2020) + tm_polygons()
```

### 4.2.2 Drawing a choropleth map using `tm_polygons()`

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.

```{r}
tm_shape(mpsz_pop2020) + tm_polygons("DEPENDENCY")
```

Things to learn from *tm_polygons()*:

-   The default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.

-   The default colour scheme used is `YlOrRd` of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.

-   By default, Missing value will be shaded in grey.

### 4.2.3 Drawing a choropleth map using *`tm_fill()`* and `tm_border()`

Actually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY")
```

Notice that the planning subzones are shared according to the respective dependecy values

To add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY") + 
  tm_borders(col = "blue" ,lwd = 0.5, lty = "longdash",  alpha = 1)
```

Notice that light-gray border lines have been added on the choropleth map.

::: callout-note
The *alpha* argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).

Beside *alpha* argument, there are three other arguments for *tm_borders()*, they are:

-   *col* = border colour,

-   *lwd* = border line width. The default is 1, and

-   *lty* = border line type. The default is “solid”. **`"blank"`**, **`"solid"`**, **`"dashed"`**, **`"dotted"`**, **`"dotdash"`**,**`"longdash"`**, or **`"twodash"`**, where **`"blank"`** uses ‘invisible lines’ (i.e., does not draw them).
:::

## 4.3 Data classification methods of *`tmap`*

Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

To define a data classification method, the *style* argument of *`tm_fill()`* or *`tm_polygons()`* will be used.

### 4.3.1 Plotting choropleth maps with built-in classification methods

**tmap** provides a total ten data classification methods:

-   *quantile*,

-   *equal*,

-   *pretty* (default),

-   *fixed*,

-   *sd*,

-   *kmeans*,

-   *hclust*,

-   *bclust*,

-   *fisher*, and

-   *jenks*.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

*equal* data classification method is used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(col = "red" ,lwd = 0.5, alpha = 0.5)
```

::: callout-tip
The distribution of quantile data classification method are more evenly distributed then equal data classification method.
:::

Other data classification methods.

*`pretty(default)`*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5) +
  tm_borders(alpha = 0.5)
```

*`fixed`*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "fixed",
          breaks = c(0, 0.5, 1, 1.5, 2, Inf)) +
  tm_borders(alpha = 0.5)
```

::: callout-note
For style = "fixed", we need to provide a set of fixed breaks manually. If breaks are not supplied, it leads to `Error in if (lw == -Inf) lw <- breaks[2] : argument is of length zero`, as the function doesn't know how to classify the data.

\*\*\* With help from ChatGPT \*\*\*
:::

*`sd`*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "sd") +
  tm_borders(alpha = 0.5)
```

*`kmeans`*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

*`hclust`*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "hclust") +
  tm_borders(alpha = 0.5)
```

*`bclust`*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "bclust") +
  tm_borders(alpha = 0.5)
```

*`fisher`*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "fisher") +
  tm_borders(alpha = 0.5)
```

*`jenks`*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

Exploring using the same classification methods with different numbers of classes(i.e. 2,6,10,20)

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          palette = "Dark2", 
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          palette = "Dark2", 
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          palette = "Dark2", 
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,
          palette = "Dark2", 
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

::: callout-tip
When n increase, there will be more classification, which will be able to provide more insightful information for us to analysis.
:::

### 4.3.2 Plotting choropleth map with custom break

For all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the *breaks* argument to the *tm_fill()*. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).

Before we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of **DEPENDENCY** field.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

With reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)

Now, we will plot the choropleth map

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

## 4.4 Colour Scheme

**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.

### 4.4.1 Using ColourBrewer palette

To change the colour, we assign the preferred colour to *palette* argument of *tm_fill()*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

To reverse the colour shading, add a "-" prefix

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "-Blues") +
  tm_borders(alpha = 0.5)
```

## 4.5 Map Layouts

Map layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.

### 4.5.1 Map Legend

In **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

### 4.5.2 Map style

**tmap** allows a wide variety of layout settings to be changed. They can be called by using *tmap_style().*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

```{r}
tmap_style()
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("cobalt")
```

### 4.5.3 Cartographic Furniture

Beside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.

In the code chunk below, *tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

To reset the default style

```{r}
tmap_style("white")
```

## 4.6 Drawing Small Multiple Choropleth Maps

**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.

In **tmap**, small multiple maps can be plotted in three ways:

-   by assigning multiple values to at least one of the asthetic arguments,

-   by defining a group-by variable in *tm_facets()*, and

-   by creating multiple stand-alone maps with *tmap_arrange()*.

### 4.6.1 By assigning multiple values to at least one of the aesthetic arguments

In this example, small multiple choropleth maps are created by defining ***ncols*** in **`tm_fill()`**

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "plasma") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

In this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

### 4.6.2 By defining a group-by variable in tm_facets()

In this example, multiple small choropleth maps are created by using **tm_facets()**.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

### 4.6.3 By creating multiple stand-alone maps with *tmap_arrange()*

In this example, multiple small choropleth maps are created by creating multiple stand-alone maps with **tmap_arrange()**.

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

## 4.7 Mappping Spatial Object Meeting a Selection Criterion

Instead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

# 5. References

Tutorial provided by Professor Kam Tin Seong (SMU) for IS415 - Geospatial Analytics and Application

Link : <https://r4gdsa.netlify.app/chap02.html#by-creating-multiple-stand-alone-maps-with-tmap_arrange>

## 5.1 All about tmap package

-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)

-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html)

-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)

-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)

-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)

-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)

## 5.2 Geosptial data wrangling

-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/index.html)

-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)

-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)

## 5.3 Data wrangling

-   [dplyr](https://dplyr.tidyverse.org/)

-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)

-   [tidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)
