---
title: "Take-home Exercise 1: Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar"
author: "Pan Mingwei"
date: "September 5, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
  cache: true
format: 
  html: 
    code-fold: false
    code-summary: "Click to expand/collapse code"
---

# 1. Overview

Millions of people have their lives shattered by armed conflict – wars – every year.

Armed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades.

## 1.1 Objective

Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, I will apply spatial point patterns analysis methods to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar.

## 1.2 Data

### 1.2.1 Armed Conflict Data

For the purpose of this assignment, armed conflict data of Myanmar between 2021-2024 from [Armed Conflict Location & Event Data (ACLED)](https://acleddata.com/), an independent, impartial, international non-profit organization collecting data on violent conflict and protest in all countries and territories in the world, should be used.

In terms of event types, I will focus on at least four main event types, namely: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.

In terms of study period, I will focus on quarterly armed conflict events from January 2021 until June 2024.

### 1.2.2 GIS Data

I will be using [**Myanmar State and Region Boundaries with Sub-regions MIMU v9.4**](http://geonode.themimu.info/layers/geonode%3Ammr_polbnda2_adm1_250k_mimu_1)**.**

## 1.3 Importing Packages

The following R packages are used for this assignment:

-   **sf**, for importing, managing and processing geospatial data.

-   **tidyverse**, for importing, wrangling and visualising data.

-   **tmap**, to create thematic maps.

-   **spatstat**, for point pattern analysis.

-   **raster**,to reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster).

-   **sparr**, provides functions for kernel density estimation.

-   [**magick**](https://cran.r-project.org/web/packages/magick/vignettes/intro.html), modern and simple toolkit for image processing in R.

-   **gifski**, to create animated GIFs.

-   [**stpp**](https://cran.r-project.org/web/packages/stpp/stpp.pdf), for spatio-temporal analysis.

```{r}
pacman::p_load(sf,tidyverse,tmap,spatstat,sparr,raster,magick,gifski,stpp)
```

# 2. Data Wrangling

## 2.1 Aspatial Data

### 2.1.1 Importing Data

```{r}
acled_sf <- read_csv("data/aspatial/2021-01-01-2024-06-30-Myanmar.csv")
```

### 2.1.2 CRS Adjustment

```{r}
st_crs(acled_sf)
```

As the current **acled_sf** do not have CRS, which means there is no geometry column in the sf object. Therefore, before we change the CRS, we need to convert the **longitude** and **latitude** columns into a **spatial format**. Since Myanmar is UTM zone 47(EPSG:32647), lets create the geometry column and transform the CRS to `UTM Zone 47N`.

```{r}
acled_sf <- acled_sf %>%
  st_as_sf(coords = c("longitude", "latitude"), crs=4326) %>%
  st_transform(crs = 32647)
```

```{r}
st_crs(acled_sf)
```

We can see that now the CRS is `UTM Zone 47` now.

### 2.1.3 Check and Clean Aspatial Data

```{r}
head(acled_sf, n =1)
```

By checking the data, we can see that the data type for **event_date** was in Character instead of Date. And there is a timestamp field, in order to figure out what is this field for, we need to convert it to human readable as well.

Lets convert the data type for **event_date** to Date and **timestamp** to normal date time format, so we handle the field easier at later stage.

```{r}
acled_sf <- acled_sf %>%
  mutate(event_date = dmy(event_date)) %>%
  mutate(timestamp = as.POSIXct(timestamp, origin = "1970-01-01", tz = "Asia/Yangon"))
```

By looking at the data, it seems that the **timestamp** field was the date time when the data was recorded. Therefore, this field would not be useful for us.

### 2.1.4 Data Transformation

Since we will be focus on quarterly, lets extract **year** and **quarter** from **event_date** field.

```{r}
acled_sf <- acled_sf %>%
  mutate(year = year(event_date),
         quarter = quarter(event_date))
```

```{r}
summary(acled_sf)
```

#### 2.1.4.1 Handling Categorical Data

Since there are fields in the dataset are categorical related fields and they are in character vectors. To make sure consistency of the data, we can use `as.factor` function to convert the variable to categorical variable. These fields are: **disorder_type**, **event_type**, **sub_event_type**, **actor1**, **actor2**, **admin1** , **source_scale** etc.

By doing so, it makes easier to group and summarize data by categories and will provide more consistent behavior.

```{r}
#| eval: false
acled_sf <- acled_sf %>%
  mutate( event_type = as.factor(event_type),
          admin1 = as.factor(admin1)
         )
         
```

::: callout-note
As there are other categorical fields, but since not all the field will be used and useful(as some of the field have too many level), hence I only factor fields that will be useful for the next stage.
:::

To conserve memory, we should select only the fields relevant to the analysis and save them in RDS format, making it more convenient for future reference.

```{r}
#| eval: false
acled_sf <- acled_sf %>%
  dplyr::select(event_date,year,quarter,event_type,actor1,admin1,fatalities)
```

```{r}
#| eval: false
write_rds(acled_sf, "data/rds/acled_sf.rds")
```

```{r}
acled_sf <- read_rds( "data/rds/acled_sf.rds")
```

To check the levels.

```{r}
levels(acled_sf$event_type)
```

## 2.2 Geospatial Data

### 2.2.1 Importing Data

```{r}
msrb_sub_reg <- st_read(dsn = "data/geospatial/mmr_polbnda2_adm1_250k_mimu_1", layer = "mmr_polbnda2_adm1_250k_mimu_1")
```

### 2.2.2 CRS Adjustments

Lets check what is the CRS for `msrb_sub_reg`.

```{r}
st_crs(msrb_sub_reg)
```

As from above, we can see that the original data is geographic coordinate system. We need to convert it to projected coordinate system. Since Myanmar is UTM zone 47(EPSG:32647), lets transform the CRS to `UTM Zone 47N`.

```{r}
msrb_sub_reg <- st_transform(msrb_sub_reg, crs = 32647)
st_crs(msrb_sub_reg)
```

### 2.2.3 Check and Clean Geospatial Data

To ensure that the geometries in the shapefile are valid and correct them if any invalid geometries found.

```{r}
# Check if the data are valid
st_is_valid(msrb_sub_reg)
# Fix invalid data
msrb_sub_reg <- st_make_valid(msrb_sub_reg)
```

### 2.2.4 Standardize Column Names

We can see that the column name are not descriptive.

```{r}
msrb_sub_reg
```

Rename the column name to more descriptive name and remove not useful column .

```{r}
msrb_sub_reg <- msrb_sub_reg %>%
  rename(state_name = ST,
         state_pcode = ST_PCODE,
         state_region = ST_RG) %>%
  dplyr::select(-ST_MMR)
```

```{r}
summary(msrb_sub_reg)
```

### 2.2.5 Myanmar Boundaries

```{r, fig.width=12, fig.height=12}
plot(st_geometry(msrb_sub_reg))
```

Save into RDS, for future use.

```{r}
#| eval: false
write_rds(msrb_sub_reg,"data/rds/msrb_sub_reg.rds")
```

### 2.2.6 Myanmar Boundaries With State Name

```{r, fig.width=10, fig.height=12}
ggplot(data = msrb_sub_reg) +
  geom_sf(aes(fill = state_name), color = "black") + 
  geom_sf_label(aes(label = state_name), size = 4, color = "black",fill = "white", label.size = 0.5) + 
  scale_fill_hue(n = length(unique(msrb_sub_reg$state_name))) +
  theme(legend.position = "right") +
  ggtitle("Myanmar Administrative Boundaries")
```

# 3 Kernel Density Estimation

## 3.1 Remove island

As we can see from above, the Myanmar boundaries have many islands, which will affect us as when plot the points. Therefore, by removing smaller island,it will help us in visualization.

```{r,fig.width=12, fig.height=12}
# Merge adj polygons
merged_msrb <- st_union(msrb_sub_reg) %>%
  st_cast("POLYGON")
# Convert back to sf object
merged_msrb <- st_as_sf(merged_msrb)
# set threshold
min_area_threshold <- units::set_units(100, "km^2")

areas <- st_area(merged_msrb)

# Filter out polygons smaller than the threshold
filtered_msrb <- merged_msrb %>% 
  filter(areas > min_area_threshold)

plot(st_geometry(filtered_msrb), main = "Without Small Islands")
```

```{r}
#| eval: false
write_rds(filtered_msrb, "data/rds/filtered_msrb.rds")
```

## 3.2 Create owin Object

After removing the small island, we can now create an **owin** (observed window) object, which we will use when creating the KDE layer.

```{r,fig.width=12, fig.height=12}
msrb_owin <- as.owin(filtered_msrb)
plot(msrb_owin)
```

## 3.3 Determine Best Sigma And Kernel

To find out which sigma and kernel to use for KDE, we will try various type and see which give us the best visualization. We will use data that is battles event in 2021 Q1 as the sample data.

```{r}
battles_2021_Q1 <- acled_sf %>%
  filter(event_type == 'Battles' & year == 2021 & quarter == 1)

battles_2021_Q1_ppp <- as.ppp(st_coordinates(battles_2021_Q1), st_bbox(battles_2021_Q1))
any(duplicated(battles_2021_Q1_ppp))
```

Using *`jittering`*, to add a small perturbation to the duplicate points so that they do not occupy the exact same space.

```{r}
battles_2021_Q1_ppp <- rjitter(battles_2021_Q1_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
any(duplicated(battles_2021_Q1_ppp))
```

To apply the **owin** object to the **ppp** object.”

```{r,fig.width=12, fig.height=12}
battles_2021_Q1_ppp = battles_2021_Q1_ppp[msrb_owin]
plot(battles_2021_Q1_ppp, pch = 20, cex = 1)
```

### 3.3.1 Comparing Different Sigma

```{r,fig.width=12, fig.height=12,cache=TRUE}
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))  # adjust the margin values

plot(density(battles_2021_Q1_ppp, sigma = bw.ppl, edge = TRUE, kernel = "gaussian"), main = "PPL")
plot(density(battles_2021_Q1_ppp, sigma = bw.CvL, edge = TRUE, kernel = "gaussian"), main = "CvL")
plot(density(battles_2021_Q1_ppp, sigma = bw.scott, edge = TRUE, kernel = "gaussian"), main = "Scott")
plot(density(battles_2021_Q1_ppp, sigma = bw.diggle, edge = TRUE, kernel = "gaussian"), main = "Diggle")
```

::: callout-note
As can be seen above, among the four types of sigma, `PPL` provides the best visualization. Both Scott and CvL methods result in too much spread, while Diggle makes it difficult to see the points in the bottom part of the plot.
:::

### 3.3.2 Comparing Different Kernel

Check the bandwidth for `bw.ppl`.

```{r}
bw <- bw.ppl(battles_2021_Q1_ppp)
bw
```

```{r}
# Rescale the measurement unit
battles_2021_Q1_ppp.km <- rescale(battles_2021_Q1_ppp, 55000, "km")
```

```{r,fig.width=12, fig.height=12,cache=TRUE}
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))

plot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = "gaussian"), main = "Gaussian")
plot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = "epanechnikov"), main = "Epanechnikov")
plot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = "quartic"), main = "Quartic")
plot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = "disc"), main = "Disc")
```

::: callout-note
Among the four kernels, the `Gaussian` kernel provides the smoothest visualization. Therefore, we will use Gaussian kernel for our analysis.
:::

## 3.4 AY2021

As I am interested in understanding an overall picture of the conflict situation each year, including how different types of conflicts happen concurrently. Therefore, I will analysis it by year and event type. By doing this way it will give me the following pros and cons:

-   Pros:

    -   **Holistic View**: I can compare multiple event types within the same time frame, identifying relationships or patterns between them.

    -   **Comprehensive Spatial Understanding**: Provide a snapshot of all event types within a year, is there any interactions between event type. (e.g. Battles occur near Violence against civilians)

-   Cons:

    -   **Temporal Trends Less Visible**: This way does not provide insight into how a specific event type evolves over the years.

### 3.4.1 Q1

```{r,fig.width=12, fig.height=12}
#| code-fold: true
event_types <- c("Battles", "Explosions/Remote violence", "Strategic developments", "Violence against civilians")

par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2021 & quarter == 1)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot KDE
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2021 Q1 -", event))
}
```

### 3.4.2 Q2

```{r,fig.width=12, fig.height=12}
#| code-fold: true
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2021 & quarter == 2)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2021 Q2 -", event))
}
```

### 3.4.3 Q3

```{r,fig.width=12, fig.height=12}
#| code-fold: true
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2021 & quarter == 3)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2021 Q3 -", event))
}
```

### 3.4.4 Q4

```{r,fig.width=12, fig.height=12}
#| code-fold: true
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2021 & quarter == 4)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2021 Q4 -", event))
}
```

::: callout-tip
## 2021 Insight

-   In Q1 and Q2 of 2021, we can observe that **Battles** and **Explosions/Remote Violence** tend to occur in similar locations(the boundary between Kachin state and Shan state; Rakhine State and the boundary between Kayin State, Mon State and Yangon Division), suggesting a closer relationship between these two event type.

-   On the other hand, **Strategic Developments** and **Violence Against Civilians** appear to be spatially correlated with each other, mostly at the boundary between Magway Division and Mandalay Division , but less so with **Battles** and **Explosions/Remote Violence.**

-   By Q3 and Q4, as the frequency of conflicts increase, the spatial distribution of all four event type begins to converge mostly at the boundary between Magway Division and Mandalay Division. This suggests that these events are increasingly co-occurring in the similar geographic areas.
:::

## 3.5 AY2022

### 3.5.1 Q1

```{r,fig.width=12, fig.height=12}
#| code-fold: true
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2022 & quarter == 1)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2022 Q1 -", event))
}
```

### 3.5.2 Q2

```{r,fig.width=12, fig.height=12}
#| code-fold: true
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2022 & quarter == 2)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2022 Q2 -", event))
}
```

### 3.5.3 Q3

```{r,collapse = TRUE,fig.width=12, fig.height=12}
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2022 & quarter == 3)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2022 Q3 -", event))
}
```

### 3.5.4 Q4

```{r,fig.width=12, fig.height=12}
#| code-fold: true
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2022 & quarter == 4)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2022 Q4 -", event))
}
```

::: callout-tip
## 2022 Insight

-   In 2022, conflict levels remained high across all four event types. Most conflicts continued to occur along the boundary between **Magway Division** and **Mandalay Division** (central region). Toward end of the year, there was a noticeable increase in conflicts in the southern region, particularly in Battles and Violence Against Civilians events.
:::

## 3.6 AY2023

### 3.6.1 Q1

```{r,fig.width=12, fig.height=12}
#| code-fold: true
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2023 & quarter == 1)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2023 Q1 -", event))
}
```

### 3.6.2 Q2

```{r,fig.width=12, fig.height=12}
#| code-fold: true
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2023 & quarter == 2)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2023 Q2 -", event))
}
```

### 3.6.3 Q3

```{r,fig.width=12, fig.height=12}
#| code-fold: true
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2023 & quarter == 3)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2023 Q3 -", event))
}
```

### 3.6.4 Q4

```{r,fig.width=12, fig.height=12}
#| code-fold: true
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2023 & quarter == 4)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2023 Q4 -", event))
}
```

::: callout-tip
## 2023 Insight

-   Overall in 2023, most of the conflict for the four type continued to occur along the boundary between **Magway Division** and **Mandalay Division** (Central Region).

-   However, we can see a decreasing trend in Strategic Developments and Violence Against Civilians (can see from the scale bar at the side)

-   Conversely, Battles and Explosions/Remote Violence increased, with these events gradually shifting toward the boundary between **Kachin State** and **Shan State** (North-Ease Region)by the end of the year.
:::

## 3.7 AY2024

### 3.7.1 Q1

```{r,fig.width=12, fig.height=12}
#| code-fold: true
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2024 & quarter == 1)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2024 Q1 -", event))
}
```

### 3.7.2 Q2

```{r,fig.width=12, fig.height=12}
#| code-fold: true
par(mfrow = c(2, 2))
par(mar = c(3, 3, 2, 1))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  filtered_data <- acled_sf %>%
    filter(event_type == event & year == 2024 & quarter == 2)
  
  # Convert to ppp format
  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
  
  # Handle duplicated points
  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)
  
  # Extract conflict Event located within Myanmar
  ppp_data <- ppp_data[msrb_owin]
  
  # Re-scale
  ppp_data.km <- rescale(ppp_data, 55000, "km")
  
  # Plot density
  plot(density(ppp_data.km, 
               sigma = bw.ppl, 
               edge = TRUE, 
               kernel = "gaussian"), 
       main = paste("2024 Q2 -", event))
}
```

::: callout-tip
## 2024 Insight

-   In the first half of 2024, conflict trends remained similar to those of 2023, with the **Central region** being the primary hotspot, followed by the **Southern region**. However, there was a significant increase in conflict in **Rakhine State** during this period.

-   In term of co-relation between event types, **Battles** and **Explosions/Remote Violence** remained strongly correlated, while **Strategic Developments** and **Violence Against Civilians** also showed a continued correlation.
:::

## 3.8 KDE Limitation

::: callout-important
## KDE Limitation

-   Since I am using `bw.ppl` for sigma, the bandwidth for each event type is adaptive. This creates a challenge when analyzing patterns across different event types and quarters. Sometimes, the KDE may not show many hotspots, even though the number of conflicts in that quarter is higher compared to another KDE with a wider spread of hotspots. ( As I observed that with a higher number on the scale bar, the KDE hotspots are fewer and more concentrated, while the KDE plot with a lower number on the scale bar shows more widespread hotspots.)
:::

# 4. Second-Order Spatial Point Pattern Analysis

For 2nd-order spatial point pattern analysis, each function(G,F,K,L) has their specific purpose:

-   `G-function`: Measure the distribution of distance from random points to the nearest event points. Helps in understanding how clustered points are. E.g. 1 to 500 (**Commonly used**)

-   `F-function`: Measures the distance from event points to random points. Complements the G-function, offering another way to detect clustering.

-   `K-function`: Estimates the number of points within a given distance of each other, providing a more general measure of spatial interaction across multiple scales. E.g.1 to 10, 10 to 20 etc . (**Commonly used**)

-   `L-function`: A linear transformation of the K-function that adjusts for boundary effects, making it easier to interpret by creating a straight line under complete spatial randomness.

## 4.1 Choosing Function and Number of Simulations

I want to find out that whether the conflict of the different event type that happen quarterly is evenly distributed or clustered. Since to compute for each event quarterly will need a long time to compute. Therefore, I will use `G-function` for the analysis, as compare to the other three functions, G-function tend to be faster and I will choose 200 for the number of simulations(Note the number of simulation start from 0, so I will use 199 for nsim).

## 4.2 2021

### 4.2.1 Q1

```{r}
event_types <- c("Battles", "Explosions/Remote violence", "Strategic developments", "Violence against civilians")
```

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2021 & quarter == 1)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}
```

![](website_files/2nd_order_msrb/2021Q1.png)

### 4.2.2 Q2

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2021 & quarter == 2)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}
```

![](website_files/2nd_order_msrb/2021Q2.png)

### 4.2.3 Q3

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))
# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2021 & quarter == 3)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}
```

![](website_files/2nd_order_msrb/2021Q3.png)

### 4.2.4 Q4

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))

# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2021 & quarter == 4)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}
```

![](website_files/2nd_order_msrb/2021Q4.png)

## 4.3 2022

### 4.3.1 Q1

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))

# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2022 & quarter == 1)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}
```

![](website_files/2nd_order_msrb/2022Q1.png)

### 4.3.2 Q2

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))

# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2022 & quarter == 2)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}

```

![](website_files/2nd_order_msrb/2022Q2.png)

### 4.3.3 Q3

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))

# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2022 & quarter == 3)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}

```

![](website_files/2nd_order_msrb/2022Q3.png)

### 4.3.4 Q4

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))

# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2022 & quarter == 4)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}

```

![](website_files/2nd_order_msrb/2022Q4.png)

## 4.4 2023

### 4.4.1 Q1

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))

# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2023 & quarter == 1)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}

```

![](website_files/2nd_order_msrb/2023Q1.png)

### 4.4.2 Q2

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))

# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2023 & quarter == 2)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}

```

![](website_files/2nd_order_msrb/2023Q2.png)

### 4.4.3 Q3

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))

# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2023 & quarter == 3)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}

```

![](website_files/2nd_order_msrb/2023Q3.png)

### 4.4.4 Q4

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))

# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2023 & quarter == 4)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}

```

![](website_files/2nd_order_msrb/2023Q4.png)

## 4.5 2024

### 4.5.1 Q1

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))

# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2024 & quarter == 1)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}
```

![](website_files/2nd_order_msrb/2024Q1.png)

### 4.5.2 Q2

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
par(mfrow = c(2, 2))

# Create a plot for each event type
for (event in event_types) {
  # Filter data by event type
  G_conflict <- acled_sf %>%
    filter(event_type == event & year == 2024 & quarter == 2)
  
  # Convert to ppp format
  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))
  # Handle duplicated points
  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
  # Extract event located within Myanmar
  G_conflict_ppp = G_conflict_ppp[msrb_owin]
  # Re-scale
  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
  # Generate simulations
  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)
  plot(G_conflict.csr, main = paste(event))
}

```

![](website_files/2nd_order_msrb/2024Q2.png)

## 4.6 Insight

::: callout-tip
## 2nd Order Spatial Point Pattern Analysis Insight

-   From the quarterly plots, the observed line in most cases lies above the envelope, indicating clustering in the conflict locations. An exception is seen in **2021 Q1**, where the plot for **violence against civilians** shows the observed line entering the envelope toward the end.

-   Overall, this confirms that the spatial patterns for all four event types exhibit clustering over the years.
:::

## 4.7 Further into the Hot Conflict Region

As observed in the G function graph for the whole of Myanmar, the plots are quite similar, providing limited insight into the conflict patterns. Therefore, based on the KDE generated in Section 3, I have chosen to focus on the central region, where most of the conflicts occur, specifically in Magway State, Mandalay State, and Sagaing State. To check whether the G-function graph within the 3 state will be able to provide any useful insight of the patterns.

To read the RDS file.

```{r}
msrb_sub_reg <- read_rds("data/rds/msrb_sub_reg.rds")
acled_sf <- read_rds("data/rds/acled_sf.rds")
```

To filter out the three state.

```{r}
selected_states <- msrb_sub_reg %>%
  filter(state_name %in% c("Magway", "Mandalay", "Sagaing"))
```

```{r}
#| eval: false
conflcit_within_states <- st_intersection(acled_sf, selected_states)
```

To write and read the data in RDS format.

```{r}
#| eval: false
 write_rds(conflcit_within_states,"data/rds/conflcit_within_states.rds")
```

```{r}
conflcit_within_states <- read_rds("data/rds/conflcit_within_states.rds")
```

```{r}
nrow(acled_sf)
nrow(conflcit_within_states)
```

We can see that nearly 50% of the conflicts occurred within the three states over the period.

Lets to have a quite look of the plot.

```{r,fig.width=12,fig.height=10}
#| code-fold: true

tm1 <- tm_shape(selected_states) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
  tm_text("state_name", size = 1, col = "blue")

tm2 <- tm_shape(selected_states) +
  tm_borders(alpha = 1, col = "red") +
  tm_polygons() +
  tm_shape(conflcit_within_states)+
  tm_dots()

tmap_arrange(tm1, tm2, ncol = 2)
```

The below chunk is to create owin object of the selected states.

```{r}
selected_states_owin <- as.owin(selected_states)
```

As when I plot out the sample G-function plot, the observed line and the theoretical line are very far. Therefore I will use a low **nsim** (number of simulations) to speed up the computation and examine the pattern for each quarter.

::: panel-tabset
## Battles

```{r,fig.width=12,fig.height=10}
#| code-fold: true

par(mfrow = c(2, 2))

years <- 2021:2024
quarters <- c(1, 2, 3, 4) 
quarters_2024 <- c(1, 2) 
for (year in years) {
  # Determine the quarters to loop through for each year
  if (year == 2024) {
    quarters_to_use <- quarters_2024
  } else {
    quarters_to_use <- quarters
  }
  
  # Loop through each quarter
  for (quarter in quarters_to_use) {
    # Filter data based on the current year and quarter
    filtered_data <- conflcit_within_states %>%
      filter(event_type == "Battles" & year == year & quarter == quarter)
    
    # Convert to ppp format
    G_conflict_ppp <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
    # Handle duplicated points
    G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
    # Extract event located within the selected state
    G_conflict_ppp = G_conflict_ppp[selected_states_owin]
    # Re-scale
    G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
    # Generate simulations
    G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 3)
    plot(G_conflict.csr, main = paste("Battles G function - ", year, " Q", quarter))
  }
}
```

## Explosions/Remote violence

```{r,fig.width=12,fig.height=10}
#| code-fold: true

par(mfrow = c(2, 2))

years <- 2021:2024
quarters <- c(1, 2, 3, 4) 
quarters_2024 <- c(1, 2) 
for (year in years) {
  # Determine the quarters to loop through for each year
  if (year == 2024) {
    quarters_to_use <- quarters_2024
  } else {
    quarters_to_use <- quarters
  }
  
  # Loop through each quarter
  for (quarter in quarters_to_use) {
    # Filter data based on the current year and quarter
    filtered_data <- conflcit_within_states %>%
      filter(event_type == "Explosions/Remote violence" & year == year & quarter == quarter)
    
    # Convert to ppp format
    G_conflict_ppp <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
    # Handle duplicated points
    G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
    # Extract event located within the selected state
    G_conflict_ppp = G_conflict_ppp[selected_states_owin]
    # Re-scale
    G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
    # Generate simulations
    G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 3)
    plot(G_conflict.csr, main = paste("Explosions/Remote violence G function - ", year, " Q", quarter))
  }
}
```

## Strategic developments

```{r,fig.width=12,fig.height=10}
#| code-fold: true

par(mfrow = c(2, 2))

years <- 2021:2024
quarters <- c(1, 2, 3, 4) 
quarters_2024 <- c(1, 2) 
for (year in years) {
  # Determine the quarters to loop through for each year
  if (year == 2024) {
    quarters_to_use <- quarters_2024
  } else {
    quarters_to_use <- quarters
  }
  
  # Loop through each quarter
  for (quarter in quarters_to_use) {
    # Filter data based on the current year and quarter
    filtered_data <- conflcit_within_states %>%
      filter(event_type == "Strategic developments" & year == year & quarter == quarter)
    
    # Convert to ppp format
    G_conflict_ppp <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
    # Handle duplicated points
    G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
    # Extract event located within the selected state
    G_conflict_ppp = G_conflict_ppp[selected_states_owin]
    # Re-scale
    G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
    # Generate simulations
    G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 3)
    plot(G_conflict.csr, main = paste("Strategic developments G function - ", year, " Q", quarter))
  }
}
```

## Violence against civilians

```{r,fig.width=12,fig.height=10}
#| code-fold: true

par(mfrow = c(2, 2))

years <- 2021:2024
quarters <- c(1, 2, 3, 4) 
quarters_2024 <- c(1, 2) 
for (year in years) {
  # Determine the quarters to loop through for each year
  if (year == 2024) {
    quarters_to_use <- quarters_2024
  } else {
    quarters_to_use <- quarters
  }
  
  # Loop through each quarter
  for (quarter in quarters_to_use) {
    # Filter data based on the current year and quarter
    filtered_data <- conflcit_within_states %>%
      filter(event_type == "Violence against civilians" & year == year & quarter == quarter)
    
    # Convert to ppp format
    G_conflict_ppp <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
    # Handle duplicated points
    G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)
    # Extract event located within the selected state
    G_conflict_ppp = G_conflict_ppp[selected_states_owin]
    # Re-scale
    G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, "km")
    # Generate simulations
    G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 3)
    plot(G_conflict.csr, main = paste("Violence against civilians G function - ", year, " Q", quarter))
  }
}
```
:::

### 4.7.1 Insight

::: callout-note
## Selected State Insight

-   Despite analyzing the G-function plots for each event type on a quarterly basis within the selected states, the resulting plots resemble those of the entire Myanmar. This suggests that the spatial distribution of conflicts remains consistent across different quarters.
:::

# 5. Spatio-temporal KDE

## 5.1 Prepare the Data

To read **acled_sf** from RDS.

```{r}
#| eval: false
acled_sf <- read_rds( "data/rds/acled_sf.rds")
```

To only select the necessary fields to save memory and create a year_quarter field ,make it as factors for later to plot the graph.

::: callout-note
year_quarter need to be in numeric in order to compute STDKE.

-   2021 Q1 =\> 2021.00

-   2021 Q2 =\> 2021.25

-   2021 Q3 =\> 2021.50

-   2021 Q4 =\> 2021.75
:::

```{r}
#| eval: false
acled_sf <- acled_sf %>%
  mutate(year_quarter = round(year + (quarter - 1) / 4, 2) )
```

To filter the data based on **event_type**.

```{r}
#| eval: false
battles_sf <- acled_sf %>%
    filter(event_type == "Battles")

explosions_sf <- acled_sf %>%
    filter(event_type == "Explosions/Remote violence")

strategic_sf <- acled_sf %>%
    filter(event_type == "Strategic developments") 

civilians_sf <- acled_sf %>%
    filter(event_type == "Violence against civilians") 
```

Save the Data into rds.

```{r}
#| eval: false
write_rds(acled_sf, "data/rds/acled_sf.rds") # to update the RDS file
write_rds(battles_sf, "data/rds/battles_sf.rds")
write_rds(explosions_sf, "data/rds/explosions_sf.rds")
write_rds(strategic_sf, "data/rds/strategic_sf.rds")
write_rds(civilians_sf, "data/rds/civilians_sf.rds")
```

```{r}
filtered_msrb <- read_rds("data/rds/filtered_msrb.rds")
battles_sf <- read_rds("data/rds/battles_sf.rds")
explosions_sf <- read_rds("data/rds/explosions_sf.rds")
strategic_sf <- read_rds("data/rds/strategic_sf.rds")
civilians_sf <- read_rds("data/rds/civilians_sf.rds")
```

## 5.2 Overview

Using `tmap` packages to plot over 2021 to 2024.

::: panel-tabset
## Battles

```{r,fig.width=12,fig.height=10}
tm_shape(filtered_msrb) +
  tm_polygons() +
  tm_shape(battles_sf) +
  tm_dots()
```

## Explosions/Remote violence

```{r,fig.width=12,fig.height=10}
tm_shape(filtered_msrb) +
  tm_polygons() +
  tm_shape(explosions_sf) +
  tm_dots()
```

## Strategic developments

```{r,fig.width=12,fig.height=10}
tm_shape(filtered_msrb) +
  tm_polygons() +
  tm_shape(strategic_sf) +
  tm_dots()
```

## Violence against civilians

```{r,fig.width=12,fig.height=10}
tm_shape(filtered_msrb) +
  tm_polygons() +
  tm_shape(civilians_sf) +
  tm_dots()
```
:::

## 5.3 Visualizing Distribution of Conflict by Quarter

::: panel-tabset
## Battles

```{r,fig.width=6,fig.height=10}
#| code-fold: true
tm_shape(filtered_msrb) +
  tm_polygons() +
  tm_shape(battles_sf) +
  tm_dots(size = 0.1) +
  tm_facets(by="year_quarter",
            free.coords = FALSE, # To avoid the zoom issue of the display map
            drop.units = TRUE,
            nrow = 4)
```

## Explosions/Remote violence

```{r,fig.width=6,fig.height=10}
#| code-fold: true
tm_shape(filtered_msrb) +
  tm_polygons() +
  tm_shape(explosions_sf) +
  tm_dots(size = 0.1) +
  tm_facets(by="year_quarter",
            free.coords = FALSE, # To avoid the zoom issue of the display map
            drop.units = TRUE,
            nrow = 4)
```

## Strategic developments

```{r,fig.width=6,fig.height=10}
#| code-fold: true
tm_shape(filtered_msrb) +
  tm_polygons() +
  tm_shape(strategic_sf) +
  tm_dots(size = 0.1) +
  tm_facets(by="year_quarter",
            free.coords = FALSE, # To avoid the zoom issue of the display map
            drop.units = TRUE,
            nrow = 4)
```

## Violence against civilians

```{r,fig.width=6,fig.height=10}
#| code-fold: true
tm_shape(filtered_msrb) +
  tm_polygons() +
  tm_shape(civilians_sf) +
  tm_dots(size = 0.1) +
  tm_facets(by="year_quarter",
            free.coords = FALSE, # To avoid the zoom issue of the display map
            drop.units = TRUE,
            nrow = 4)
```
:::

## 5.3 Computing STDKE by Quarter

### 5.3.1 Creating ppp object.

Remove unwanted fields. As ppp object only need mark field and geometry field from the data frame.

```{r}
battles_quarter <- battles_sf %>%
  dplyr::select(year_quarter)

explosions_quarter <- explosions_sf %>%
  dplyr::select(year_quarter)

strategic_quarter <- strategic_sf %>%
  dplyr::select(year_quarter)

civilians_quarter <- civilians_sf %>%
  dplyr::select(year_quarter)
```

```{r}
battles_quarter_ppp <- as.ppp(battles_quarter)
explosions_quarter_ppp <- as.ppp(explosions_quarter)
strategic_quarter_ppp <- as.ppp(strategic_quarter)
civilians_quarter_ppp <- as.ppp(civilians_quarter)
```

Check if there is duplicated point.

```{r}
any(duplicated(battles_quarter_ppp))
any(duplicated(explosions_quarter_ppp))
any(duplicated(strategic_quarter_ppp))
any(duplicated(civilians_quarter_ppp))
```

Handle duplicated points.

```{r}
battles_quarter_ppp <- rjitter(battles_quarter_ppp, retry = TRUE, nsim = 1, drop = TRUE)
explosions_quarter_ppp <- rjitter(explosions_quarter_ppp, retry = TRUE, nsim = 1, drop = TRUE)
strategic_quarter_ppp <- rjitter(strategic_quarter_ppp, retry = TRUE, nsim = 1, drop = TRUE)
civilians_quarter_ppp <- rjitter(civilians_quarter_ppp, retry = TRUE, nsim = 1, drop = TRUE)
```

```{r}
any(duplicated(battles_quarter_ppp))
any(duplicated(explosions_quarter_ppp))
any(duplicated(strategic_quarter_ppp))
any(duplicated(civilians_quarter_ppp))
```

Write the **ppp** object into RDS file, so that we can re-use them without running all the above steps again.

```{r}
#| eval: false
write_rds(battles_quarter_ppp, "data/rds/battles_quarter_ppp.rds")
write_rds(explosions_quarter_ppp, "data/rds/explosions_quarter_ppp.rds")
write_rds(strategic_quarter_ppp, "data/rds/strategic_quarter_ppp.rds")
write_rds(civilians_quarter_ppp, "data/rds/civilians_quarter_ppp.rds")
```

### 5.3.2 Including Owin object

```{r}
msrb_owin <- as.owin(filtered_msrb)
```

```{r}
battles_quarter_owin <- battles_quarter_ppp[msrb_owin]
explosions_quarter_owin <- explosions_quarter_ppp[msrb_owin]
strategic_quarter_owin <- strategic_quarter_ppp[msrb_owin]
civilians_quarter_owin <- civilians_quarter_ppp[msrb_owin]
# summary(battles_quarter_owin)
```

### 5.3.3 Compute STKDE for Events

Compute STKDE for battles event.

```{r}
# Re-scale
battles_quarter_owin.km <- rescale(battles_quarter_owin, 1000, "km")
battles_st_kde <- spattemp.density(battles_quarter_owin.km)
summary(battles_st_kde)
```

Explosions/remote violence

```{r}
# Re-scale
explosions_quarter_owin.km <- rescale(explosions_quarter_owin, 1000, "km")
explosions_st_kde <- spattemp.density(explosions_quarter_owin.km)
summary(explosions_st_kde)
```

Strategic Developments

```{r}
# Re-scale
strategic_quarter_owin.km <- rescale(strategic_quarter_owin, 1000, "km")
strategic_st_kde <- spattemp.density(strategic_quarter_owin.km)
summary(strategic_st_kde)
```

Violence Against Civilians

```{r}
# Re-scale
civilians_quarter_owin.km <- rescale(civilians_quarter_owin, 1000, "km")
civilians_st_kde <- spattemp.density(civilians_quarter_owin.km)
summary(civilians_st_kde)
```

### 5.3.4 STDKE Plot

Create variables for later use. Mainly **times** for the time field for STKDE and **time_labels** for the naming of the plot.

```{r}
times <- seq(2021.00, 2024.25, by = 0.25)
time_labels <- sapply(times, function(t) {
  year <- floor(t)
  quarter <- ((t - year) * 4) + 1
  paste(year, " Q", quarter, sep = "")
})
```

::: panel-tabset
## Battles

```{r,fig.width=12,fig.height=10}
par(mfrow = c(2, 2))
for(i in seq_along(times)){
  plot(battles_st_kde, times[i] ,
       override.par=FALSE,
       fix.range=TRUE,
       main=paste("Battles STKDE in ",time_labels[i])
       )
}
```

## Explosions/Remote Violence

```{r,fig.width=12,fig.height=10}
par(mfrow = c(2, 2))
for(i in seq_along(times)){
  plot(explosions_st_kde, times[i] ,
       override.par=FALSE,
       fix.range=TRUE,
       main=paste("Explosions/Remote Violence STKDE in ",time_labels[i])
       )
}
```

## Strategic Developments

```{r,fig.width=12,fig.height=10}
par(mfrow = c(2, 2))
for(i in seq_along(times)){
  plot(strategic_st_kde, times[i] ,
       override.par=FALSE,
       fix.range=TRUE,
       main=paste("Strategic Developments STKDE in ",time_labels[i])
       )
}
```

## Violence Against Civilians

```{r,fig.width=12,fig.height=10}
par(mfrow = c(2, 2))
for(i in seq_along(times)){
  plot(civilians_st_kde, times[i] ,
       override.par=FALSE,
       fix.range=TRUE,
       main=paste("Violence Against Civilians STKDE in ",time_labels[i])
       )
}
```
:::

### 5.3.5 Animate the Plot

To better visualize the spatial-temporal KDE plot, I will use `magick` package in R to convert a sequence of PNG images into a dynamic GIF. Each PNG file represents spatial-temporal KDE plots for different quarters, and I am combining them into an animated GIF that visually depicts changes in data over time. The `magick` package allows me to handle and manipulate these images seamlessly, and I am setting parameters like the frame rate (fps) to control the speed of the animation.

::: panel-tabset
## Battles

```{r}
#| code-fold: true
#| eval: false
for(i in seq_along(times)){
   # Define the file path
  file_path <- paste0("data/images/", time_labels[i], "_Battles.png")
  
  # Open a PNG device
  png(file_path, width = 800, height = 600)
  plot(battles_st_kde, times[i] ,
       override.par=FALSE,
       fix.range=TRUE,
       main=paste("Battles STKDE in ",time_labels[i])
       )
  dev.off()
}
```

```{r}
#| code-fold: true
image_files <- list.files("data/images/", pattern = "_Battles\\.png", full.names = TRUE)
image_files <- sort(image_files) 
# Read images into a list
images <- image_read(image_files)

# Create an animation
animation <- image_animate(images, fps = 1)

# Display the animation
print(animation)
```

## Explosions/Remote Violence

```{r}
#| code-fold: true
#| eval: false
for(i in seq_along(times)){
   # Define the file path
  file_path <- paste0("data/images/", time_labels[i], "_Explosions.png")
  
  # Open a PNG device
  png(file_path, width = 800, height = 600)
  plot(explosions_st_kde, times[i] ,
       override.par=FALSE,
       fix.range=TRUE,
       main=paste("Explosions/Remote Violence STKDE in ",time_labels[i])
       )
  dev.off()
}
```

```{r}
#| code-fold: true
image_files <- list.files("data/images/", pattern = "_Explosions\\.png", full.names = TRUE)
image_files <- sort(image_files) 
# Read images into a list
images <- image_read(image_files)

# Create an animation
animation <- image_animate(images, fps = 1)

# Display the animation
print(animation)
```

## Strategic Developments

```{r}
#| code-fold: true
#| eval: false
for(i in seq_along(times)){
   # Define the file path
  file_path <- paste0("data/images/", time_labels[i], "_Strategic.png")
  
  # Open a PNG device
  png(file_path, width = 800, height = 600)
  plot(explosions_st_kde, times[i] ,
       override.par=FALSE,
       fix.range=TRUE,
       main=paste("Strategic Developments STKDE in ",time_labels[i])
       )
  dev.off()
}
```

```{r}
#| code-fold: true
image_files <- list.files("data/images/", pattern = "_Strategic\\.png", full.names = TRUE)
image_files <- sort(image_files) 
# Read images into a list
images <- image_read(image_files)

# Create an animation
animation <- image_animate(images, fps = 1)

# Display the animation
print(animation)
```

## Violence Against Civilians

```{r}
#| code-fold: true
#| eval: false
for(i in seq_along(times)){
   # Define the file path
  file_path <- paste0("data/images/", time_labels[i], "_Civilians.png")
  
  # Open a PNG device
  png(file_path, width = 800, height = 600)
  plot(explosions_st_kde, times[i] ,
       override.par=FALSE,
       fix.range=TRUE,
       main=paste("Violence Against Civilians STKDE in ",time_labels[i])
       )
  dev.off()
}
```

```{r}
#| code-fold: true
image_files <- list.files("data/images/", pattern = "_Civilians\\.png", full.names = TRUE)
image_files <- sort(image_files) 
# Read images into a list
images <- image_read(image_files)

# Create an animation
animation <- image_animate(images, fps = 1)

# Display the animation
print(animation)
```
:::

### 5.3.6 Insights

::: callout-tip
## STKDE Insights

-   In term of conflict density, we can see that for all four event types, conflicts are primarily occur at the central regions (boundary between Sagaing State, Magway State and Mandalay Sate ) and southern regions(Yangon State, Mon State and Kayin State)

-   As for conflict intensity over the years. We can see that the pattern are similar for the four event types. The intensity increasing start from 2021 Q1 and reach peak in 2022 Q4, and then shows a declining trend from 2023 through 2024 Q2.

-   In terms of the correlation between event types, **battles** and **explosions/remote violence** are more closely related, particularly in the southern regions, where the density patterns for both event types are quite similar. On the other hand, **strategic developments** and **violence against civilians** are more aligned with each other, as their patterns and densities show similar trends over the same period.
:::

## 5.4 Exploring using tmap functions

I am using a fixed bandwidth of 50km instead of a dynamic one (like bw.ppl). By employing a fixed bandwidth, the smoothing is uniform across the entire area, ensuring consistent density representation across different quarters.

In this section, I am not rechecking for duplicate points in the **ppp** object, as the issue with duplicates was already addressed and resolved in section 5.1.

I will be using continuous style (style = "cont" ) to plot the tmap, as compare with other style, continuous style give me the most smooth representation of the density.

Example of using default style.

![](website_files/gif/battles_conflict_density_animation_default.gif)

::: panel-tabset
## Battles

```{r,fig.width=12,fig.height=10}
#| eval: false
#| code-fold: true
times <- seq(2021.00, 2024.25, by = 0.25)  # From 2021 Q1 to 2024 Q2
time_labels <- sapply(times, function(t) {
  year <- floor(t)
  quarter <- ((t - year) * 4) + 1
  paste(year, "Q", quarter, sep = "")
})
# Create an empty vector to store density values and list to store the KDE layers
all_densities <- c()
densities <- list()

for (i in seq_along(times)) {
  conflict_ppp <- battles_quarter_ppp[battles_quarter$year_quarter == times[i]]
  conflict_ppp <- conflict_ppp[msrb_owin]
  conflict_ppp.km <- rescale(conflict_ppp, 1000, "km")
  density <- density(conflict_ppp.km, sigma = 50, edge = TRUE)
  
  # Convert density to raster and extract values
  kde_raster <- raster(density)
  projection(kde_raster) <- CRS("+init=EPSG:3414")
  
  # Extract density values and add to all_densities
  all_densities <- c(all_densities, values(kde_raster))
  densities[[i]] <- kde_raster
}

max_density <- max(all_densities, na.rm = TRUE)

# Create an empty list to store the tmap objects
tmaps <- list()
# Loop through each time period, create the KDE map, and add it to the list
for (i in seq_along(times)) {
  tm <- tm_shape(densities[[i]] ) +
    tm_raster(palette = "YlOrRd", 
              title = "Conflict Density",
              style = "cont",
              breaks = seq(0, max_density, length.out = 5)) +
    tm_layout(title = paste("Battles Conflict Density - ", time_labels[i]),
              legend.position = c("left", "bottom"), 
              frame = FALSE)

  # Add the tmap object to the list
  tmaps[[i]] <- tm
}
tmap_animation(tmaps, filename = "website_files/gif/battles_conflict_density_animation.gif", delay = 100, width = 800, height = 600)
```

![](website_files/gif/battles_conflict_density_animation.gif)

## Explosions/Remote Violence

```{r}
#| eval: false
#| code-fold: true
times <- seq(2021.00, 2024.25, by = 0.25)  # From 2021 Q1 to 2024 Q2
time_labels <- sapply(times, function(t) {
  year <- floor(t)
  quarter <- ((t - year) * 4) + 1
  paste(year, "Q", quarter, sep = "")
})
# Create an empty vector to store density values and list to store the KDE layers
all_densities <- c()
densities <- list()

for (i in seq_along(times)) {
  conflict_ppp <- explosions_quarter_ppp[explosions_quarter$year_quarter == times[i]]
  conflict_ppp <- conflict_ppp[msrb_owin]
  conflict_ppp.km <- rescale(conflict_ppp, 1000, "km")
  density <- density(conflict_ppp.km, sigma = 50, edge = TRUE)
  
  # Convert density to raster and extract values
  kde_raster <- raster(density)
  projection(kde_raster) <- CRS("+init=EPSG:3414")
  
  # Extract density values and add to all_densities
  all_densities <- c(all_densities, values(kde_raster))
  densities[[i]] <- kde_raster
}

max_density <- max(all_densities, na.rm = TRUE)

# Create an empty list to store the tmap objects
tmaps <- list()
# Loop through each time period, create the KDE map, and add it to the list
for (i in seq_along(times)) {
  tm <- tm_shape(densities[[i]] ) +
    tm_raster(palette = "YlOrRd", 
              title = "Conflict Density",
              style = "cont",
              breaks = seq(0, max_density, length.out = 5)) +
    tm_layout(title = paste("Explosions/Remote Violence Conflict Density - ", time_labels[i]),
              legend.position = c("left", "bottom"), 
              frame = FALSE)

  # Add the tmap object to the list
  tmaps[[i]] <- tm
}
tmap_animation(tmaps, filename = "website_files/gif/explosions_conflict_density_animation.gif", delay = 100, width = 800, height = 600)
```

![](website_files/gif/explosions_conflict_density_animation.gif)

## Strategic Developments

```{r}
#| eval: false
#| code-fold: true
times <- seq(2021.00, 2024.25, by = 0.25)  # From 2021 Q1 to 2024 Q2
time_labels <- sapply(times, function(t) {
  year <- floor(t)
  quarter <- ((t - year) * 4) + 1
  paste(year, "Q", quarter, sep = "")
})
# Create an empty vector to store density values and list to store the KDE layers
all_densities <- c()
densities <- list()

for (i in seq_along(times)) {
  conflict_ppp <- strategic_quarter_ppp[strategic_quarter$year_quarter == times[i]]
  conflict_ppp <- conflict_ppp[msrb_owin]
  conflict_ppp.km <- rescale(conflict_ppp, 1000, "km")
  density <- density(conflict_ppp.km, sigma = 50, edge = TRUE)
  
  # Convert density to raster and extract values
  kde_raster <- raster(density)
  projection(kde_raster) <- CRS("+init=EPSG:3414")
  
  # Extract density values and add to all_densities
  all_densities <- c(all_densities, values(kde_raster))
  densities[[i]] <- kde_raster
}

max_density <- max(all_densities, na.rm = TRUE)

# Create an empty list to store the tmap objects
tmaps <- list()
# Loop through each time period, create the KDE map, and add it to the list
for (i in seq_along(times)) {
  tm <- tm_shape(densities[[i]] ) +
    tm_raster(palette = "YlOrRd", 
              title = "Conflict Density",
              style = "cont",
              breaks = seq(0, max_density, length.out = 5)) +
    tm_layout(title = paste("Strategic Developments Conflict Density - ", time_labels[i]),
              legend.position = c("left", "bottom"), 
              frame = FALSE)

  # Add the tmap object to the list
  tmaps[[i]] <- tm
}
tmap_animation(tmaps, filename = "website_files/gif/strategic_conflict_density_animation.gif", delay = 100, width = 800, height = 600)
```

![](website_files/gif/strategic_conflict_density_animation.gif)

## Violence Against Civilians

```{r}
#| eval: false
#| code-fold: true
times <- seq(2021.00, 2024.25, by = 0.25)  # From 2021 Q1 to 2024 Q2
time_labels <- sapply(times, function(t) {
  year <- floor(t)
  quarter <- ((t - year) * 4) + 1
  paste(year, "Q", quarter, sep = "")
})
# Create an empty vector to store density values and list to store the KDE layers
all_densities <- c()
densities <- list()

for (i in seq_along(times)) {
  conflict_ppp <- civilians_quarter_ppp[civilians_quarter$year_quarter == times[i]]
  conflict_ppp <- conflict_ppp[msrb_owin]
  conflict_ppp.km <- rescale(conflict_ppp, 1000, "km")
  density <- density(conflict_ppp.km, sigma = 50, edge = TRUE)
  
  # Convert density to raster and extract values
  kde_raster <- raster(density)
  projection(kde_raster) <- CRS("+init=EPSG:3414")
  
  # Extract density values and add to all_densities
  all_densities <- c(all_densities, values(kde_raster))
  densities[[i]] <- kde_raster
}

max_density <- max(all_densities, na.rm = TRUE)

# Create an empty list to store the tmap objects
tmaps <- list()
# Loop through each time period, create the KDE map, and add it to the list
for (i in seq_along(times)) {
  tm <- tm_shape(densities[[i]] ) +
    tm_raster(palette = "YlOrRd", 
              title = "Conflict Density",
              style = "cont",
              breaks = seq(0, max_density, length.out = 5)) +
    tm_layout(title = paste("Violence Against Civilians Conflict Density - ", time_labels[i]),
              legend.position = c("left", "bottom"), 
              frame = FALSE)

  # Add the tmap object to the list
  tmaps[[i]] <- tm
}
tmap_animation(tmaps, filename = "website_files/gif/civilians_conflict_density_animation.gif", delay = 100, width = 800, height = 600)
```

![](website_files/gif/civilians_conflict_density_animation.gif)
:::

# 6. Second-Order Spatio-temporal Point Patterns Analysis using stpp's PCFhat

Refer from :

-   <https://mgimond.github.io/Spatial/chp11_0.html#first-and-second-order-effects>

-   <https://rstudio-pubs-static.s3.amazonaws.com/333456_c3ace11fb9cb48d899a69e0b1e1b159e.html>

## 6.1 Data preparation

As we want to perform 2nd-order spatio-temporal point patterns analysis, which we can re-use the quarterly ppp object that we have.

```{r}
filtered_msrb <- read_rds("data/rds/filtered_msrb.rds")
battles_quarter_ppp <- read_rds("data/rds/battles_quarter_ppp.rds")
explosions_quarter_ppp <- read_rds("data/rds/explosions_quarter_ppp.rds")
strategic_quarter_ppp <- read_rds("data/rds/strategic_quarter_ppp.rds")
civilians_quarter_ppp <- read_rds("data/rds/civilians_quarter_ppp.rds")
```

To check any duplicated points.

```{r}
any(duplicated(battles_quarter_ppp))
any(duplicated(explosions_quarter_ppp))
any(duplicated(strategic_quarter_ppp))
any(duplicated(civilians_quarter_ppp))
```

To ensure that, our ppp object have time data associated with the points, we can use `str` function to check.

```{r}
str(battles_quarter_ppp)
```

Notice that **marks** field store our time field in quarters (2021.00 =\> 2021 Q1, 2021.25 =\> 2021 Q2 etc).

To ensure the field is compatible with the `PCFhat` function, I need to convert the values from double to integer. This involves transforming 2021.00 to 1, 2021.25 to 2, and so on, up to 2024.25 being converted to 14.

```{r}
convert_to_integer <- function(decimal) {
  year <- floor(decimal)
  quarter <- (decimal - year) * 4 + 1
  quarter <- round(quarter)
  return((year - 2021) * 4 + quarter)
}

# Convert marks to integers
battles_quarter_ppp$marks <- sapply(battles_quarter_ppp$marks, convert_to_integer)
explosions_quarter_ppp$marks <- sapply(explosions_quarter_ppp$marks, convert_to_integer)
strategic_quarter_ppp$marks <- sapply(strategic_quarter_ppp$marks, convert_to_integer)
civilians_quarter_ppp$marks <- sapply(civilians_quarter_ppp$marks, convert_to_integer)

```

To use the PCFhat function, an error will occur if there are negative values in the x or y coordinates. I noticed that the CRS 32647, which we used to convert the sf object into a ppp object, generates negative values. Therefore, the code below offsets the negative x-coordinates by shifting all points to the right.

```{r}
# Transform and adjust filtered_msrb
bbox <- st_bbox(filtered_msrb)
# As I am using Myanmar region to find out the offset value for x-coordinates.
offset_x <- -min(bbox$xmin, bbox$xmax)

# Adjust x-coordinates, as STIKhat cannot handle negative coordinates.
battles_quarter_ppp$x <- battles_quarter_ppp$x + offset_x
explosions_quarter_ppp$x <- explosions_quarter_ppp$x + offset_x
strategic_quarter_ppp$x <- strategic_quarter_ppp$x + offset_x
civilians_quarter_ppp$x <- civilians_quarter_ppp$x + offset_x
```

## 6.2 Plotting Pair Correlation function

The code chunk below will create an stpp object for the battles data and verify that it is correctly formatted as an stpp object. Then, plot the Pair Correlation Function (PCF).

Since the plot doesn’t display when rendered in the browser, I will save the image generated from the plotPCF function and use it for website display.

::: panel-tabset
## Battles

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
library(stpp)
battles_stpp <- as.3dpoints(
  x = battles_quarter_ppp$x /1000, # change it in km
  y = battles_quarter_ppp$y /1000, # change it in km
  t = battles_quarter_ppp$marks
)
class(battles_stpp)
u <- seq(0,1000,by=50)
v <- seq(0,14,by=1)
# Use PCFhat function from stpp package
battles_pcf_result <- PCFhat(
  xyt = battles_stpp,
  t.region=c(1,14),
  dist=u,
  times=v,
)
plotPCF(battles_pcf_result, type = "contour", main = "Battle - Contour Plot")
plotPCF(battles_pcf_result, type = "persp", main = "Battle - Perspective Plot")
plotPCF(battles_pcf_result, type = "image", main = "Battle - Image Plot")
```

![](website_files/PCFhat/battle_image.png) ![](website_files/PCFhat/battle_persp.png) ![](website_files/PCFhat/battle_contour.png)

## Explosions/Remote violence

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
explosions_stpp <- as.3dpoints(
  x = explosions_quarter_ppp$x /1000, # change it in km
  y = explosions_quarter_ppp$y /1000, # change it in km
  t = explosions_quarter_ppp$marks
)
class(explosions_stpp)

u <- seq(0,1000,by=50)
v <- seq(0,14,by=1)
# Use PCFhat function from stpp package
explosions_pcf_result <- PCFhat(
  xyt = explosions_stpp,
  t.region=c(1,14),
  dist=u,
  times=v,
)

plotPCF(explosions_pcf_result, type = "contour", main = "Explosions/Remote violence - Contour Plot")
plotPCF(explosions_pcf_result, type = "persp", main = "Explosions/Remote violence - Perspective Plot")
plotPCF(explosions_pcf_result, type = "image", main = "Explosions/Remote violence - Image Plot")
```

![](website_files/PCFhat/explosions_image.png) ![](website_files/PCFhat/explosions_persp.png) ![](website_files/PCFhat/explosions_contour.png)

## Strategic developments

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
strategic_stpp <- as.3dpoints(
  x = strategic_quarter_ppp$x /1000, # change it in km
  y = strategic_quarter_ppp$y /1000, # change it in km
  t = strategic_quarter_ppp$marks
)
class(strategic_stpp)

u <- seq(0,1000,by=50)
v <- seq(0,14,by=1)
# Use PCFhat function from stpp package
strategic_pcf_result <- PCFhat(
  xyt = strategic_stpp,
  t.region=c(1,14),
  dist=u,
  times=v,
)

plotPCF(strategic_pcf_result, type = "contour", main = "Strategic developments - Contour Plot")
plotPCF(strategic_pcf_result, type = "persp", main = "Strategic developments - Perspective Plot")
plotPCF(strategic_pcf_result, type = "image", main = "Strategic developments - Image Plot")
```

![](website_files/PCFhat/strategic_image.png) ![](website_files/PCFhat/strategic_persp.png) ![](website_files/PCFhat/strategic_contour.png)

## Violence against civilians

```{r,fig.width=12,fig.height=10}
#| code-fold: true
#| eval: false
civilians_stpp <- as.3dpoints(
  x = civilians_quarter_ppp$x /1000, # change it in km
  y = civilians_quarter_ppp$y /1000, # change it in km
  t = civilians_quarter_ppp$marks
)
class(civilians_stpp)

u <- seq(0,1000,by=50)
v <- seq(0,14,by=1)
# Use PCFhat function from stpp package
civilians_pcf_result <- PCFhat(
  xyt = civilians_stpp,
  t.region=c(1,14),
  dist=u,
  times=v,
)

plotPCF(civilians_pcf_result, type = "contour", main = "Violence against civilians - Contour Plot")
plotPCF(civilians_pcf_result, type = "persp", main = "Violence against civilians - Perspective Plot")
plotPCF(civilians_pcf_result, type = "image", main = "Violence against civilians - Image Plot")
```

![](website_files/PCFhat/civilians_image.png) ![](website_files/PCFhat/civilians_persp.png) ![](website_files/PCFhat/civilians_contour.png)
:::

## 6.3 Insight

::: callout-note
-   x-axis = distance; y-axis = time

-   How to interpret PCF values:

    -   **PCF = 1**: Indicates random distribution of events.

    -   **PCF \> 1**: indicate clustering of events, meaning events are likely occur close to each other spatially and temporally.

    -   **PCF \<1**: indicate inhibition in space-time, meaning events are less likely to occur close to each other spatially and temporally.

-   Based on the image plot of the 4 event types, I observed that among the 4 Spatio-temporal PCF plots, there are two heavy density area:

    -   1 =\> distance from 0 to 100 km

    -   2 =\> distance from 280 to 350 km

    -   Based on the KDE analysis, I suspect these two areas represent the central region (bordering Magway, Mandalay, and Sagaing states) and the southern region (around Bago, Yangon, and Mon states). As the KDE suggests that these regions have experienced the highest concentration of events.

-   The Spatio-temporal PCF plots also support my previous insight from the KDE regarding the correlation between event types. **Battles** and **Explosions/Remote Violence** appear to be correlated, while **Strategic Developments** and **Violence Against Civilians** also show a correlation.
:::

# 7. Conclusion & Thoughts

The armed conflict data of Myanmar from January 2021 to June 2024 has provided valuable insights through Spatial Point Pattern Analysis. It has helped me identify the regions most affected by conflict and track how the conflict has evolved over time. Encouragingly, the analysis suggests a downward trend in conflict intensity since the peak around 2022 Q4, signaling a potential improvement in the situation.

This exercise has been a good exploration for me, as I do not have much any experience in doing analysis on data, especially on the events that are very close related to us. It was a pretty fun experience, but also a very challenging one compare to my other assignments in school. As I am new to R and not so familiar with the proper steps on handling the data etc, which cause me often re-doing steps to improve the result and the rendering process really make me frustrated. However, I feel I have gain more compare to the pain. After the exercise, it really make me understand much better on the concept I have learnt at the first weeks.
