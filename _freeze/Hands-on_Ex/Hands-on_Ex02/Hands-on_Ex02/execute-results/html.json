{
  "hash": "9c0e773cea0171fd4beffa1c7ef2e7e2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-On Exercise 02: Thematic Mapping and Geovisualisation with R\"\nauthor: \"Pan Mingwei\"\ndate: \"August 22, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n# 1. Overview\n\nThematic mapping uses map symbols to visualize invisible geographic properties, such as population, temperature, crime rate, and property prices. Geovisualization enhances understanding by graphically representing places, phenomena, or processes, engaging the human eye-brain system for spatial cognition. This hands-on exercise will be on how to create accurate and functional choropleth maps using the **tmap** package in R.\n\n# 2. Packages Used\n\nIn this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, four other R packages will be used. They are:\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.\n\nSince **readr**, **tidyr** and **dplyr** are part of **tidyverse** package. Therefore, we do not need to install them individually.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,tmap,tidyverse)\n```\n:::\n\n\n# 3. Importing Data into R\n\n## 3.1 Datasets\n\nTwo data set will be used to create the choropleth map. They are:\n\n-   **Master Plan 2014 Subzone Boundary (Web)** (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\n\n-   **Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020** in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.\n\n## 3.2 Importing Geospatial Data into R\n\nWe will using **`st_read()`** function from **`sf`** package to import shape file into R as a data frame named **`mpsz`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/mingwei/Desktop/SMU/Y3S1/IS415/xXxPMWxXx/IS415-GAA/Hands-on_Ex/Hands-on_Ex02/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nTo examine the content of **`mpsz`**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\n**Notes**: It will only display the first 10 rows of the data frame, because in R by default, only a limited number of are displayed, often the first 10 rows only.\n\nTo display more rows, we can use functions like print() , head() or modifying R's global settings (`Tools > Global > Console`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(mpsz, n = 20)  # This will print the first 20 rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 20 features:\n   OBJECTID SUBZONE_NO               SUBZONE_N SUBZONE_C CA_IND\n1         1          1            MARINA SOUTH    MSSZ01      Y\n2         2          1            PEARL'S HILL    OTSZ01      Y\n3         3          3               BOAT QUAY    SRSZ03      Y\n4         4          8          HENDERSON HILL    BMSZ08      N\n5         5          3                 REDHILL    BMSZ03      N\n6         6          7          ALEXANDRA HILL    BMSZ07      N\n7         7          9           BUKIT HO SWEE    BMSZ09      N\n8         8          2             CLARKE QUAY    SRSZ02      Y\n9         9         13         PASIR PANJANG 1    QTSZ13      N\n10       10          7               QUEENSWAY    QTSZ07      N\n11       11         12              KENT RIDGE    QTSZ12      N\n12       12          6         ALEXANDRA NORTH    BMSZ06      N\n13       13          1             MARINA EAST    MESZ01      Y\n14       14          5        INSTITUTION HILL    RVSZ05      Y\n15       15          1          ROBERTSON QUAY    SRSZ01      Y\n16       16          1 JURONG ISLAND AND BUKOM    WISZ01      N\n17       17          3                  SUDONG    WISZ03      N\n18       18          2                 SEMAKAU    WISZ02      N\n19       19          2          SOUTHERN GROUP    SISZ02      N\n20       20          1                 SENTOSA    SISZ01      N\n         PLN_AREA_N PLN_AREA_C       REGION_N REGION_C          INC_CRC\n1      MARINA SOUTH         MS CENTRAL REGION       CR 5ED7EB253F99252E\n2            OUTRAM         OT CENTRAL REGION       CR 8C7149B9EB32EEFC\n3   SINGAPORE RIVER         SR CENTRAL REGION       CR C35FEFF02B13E0E5\n4       BUKIT MERAH         BM CENTRAL REGION       CR 3775D82C5DDBEFBD\n5       BUKIT MERAH         BM CENTRAL REGION       CR 85D9ABEF0A40678F\n6       BUKIT MERAH         BM CENTRAL REGION       CR 9D286521EF5E3B59\n7       BUKIT MERAH         BM CENTRAL REGION       CR 7839A8577144EFE2\n8   SINGAPORE RIVER         SR CENTRAL REGION       CR 48661DC0FBA09F7A\n9        QUEENSTOWN         QT CENTRAL REGION       CR 1F721290C421BFAB\n10       QUEENSTOWN         QT CENTRAL REGION       CR 3580D2AFFBEE914C\n11       QUEENSTOWN         QT CENTRAL REGION       CR 601BA309A1AAC731\n12      BUKIT MERAH         BM CENTRAL REGION       CR 4DC4BF8D86594CBF\n13      MARINA EAST         ME CENTRAL REGION       CR 782A2FAF53029A34\n14     RIVER VALLEY         RV CENTRAL REGION       CR C3C22D1EE31757BD\n15  SINGAPORE RIVER         SR CENTRAL REGION       CR DF71BB5EC3C9FFD1\n16  WESTERN ISLANDS         WI    WEST REGION       WR 699F7210FBF1AFA8\n17  WESTERN ISLANDS         WI    WEST REGION       WR F718C723E08FBD51\n18  WESTERN ISLANDS         WI    WEST REGION       WR E69207D4F76DEEA3\n19 SOUTHERN ISLANDS         SI CENTRAL REGION       CR 5809FC547293EA2D\n20 SOUTHERN ISLANDS         SI CENTRAL REGION       CR A6FCDC9C447952CB\n   FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng SHAPE_Area\n1  2014-12-05 31595.84 29220.19   5267.381  1630379.3\n2  2014-12-05 28679.06 29782.05   3506.107   559816.2\n3  2014-12-05 29654.96 29974.66   1740.926   160807.5\n4  2014-12-05 26782.83 29933.77   3313.625   595428.9\n5  2014-12-05 26201.96 30005.70   2825.594   387429.4\n6  2014-12-05 25358.82 29991.38   4428.913  1030378.8\n7  2014-12-05 27680.06 30230.86   3275.312   551732.0\n8  2014-12-05 29253.21 30222.86   2208.619   290184.7\n9  2014-12-05 22077.34 29893.78   6571.323  1084792.3\n10 2014-12-05 24168.31 30104.18   3454.239   631644.3\n11 2014-12-05 23464.84 29725.37   7439.548  1826848.6\n12 2014-12-05 26548.25 30519.39   2907.051   293706.4\n13 2014-12-05 32344.05 30103.25   6470.950  1844060.7\n14 2014-12-05 28465.40 30711.22   2842.526   392563.3\n15 2014-12-05 28416.85 30409.36   4995.758   506589.0\n16 2014-12-05 13012.88 27225.87  68083.936 36707720.9\n17 2014-12-05 15931.76 19579.07  24759.066  4207271.1\n18 2014-12-05 21206.33 20465.81  18703.681  4963787.1\n19 2014-12-05 29815.09 23412.59  25626.977  2206319.5\n20 2014-12-05 27593.94 25813.35  17496.194  4919132.4\n                         geometry\n1  MULTIPOLYGON (((31495.56 30...\n2  MULTIPOLYGON (((29092.28 30...\n3  MULTIPOLYGON (((29932.33 29...\n4  MULTIPOLYGON (((27131.28 30...\n5  MULTIPOLYGON (((26451.03 30...\n6  MULTIPOLYGON (((25899.7 297...\n7  MULTIPOLYGON (((27746.95 30...\n8  MULTIPOLYGON (((29351.26 29...\n9  MULTIPOLYGON (((20996.49 30...\n10 MULTIPOLYGON (((24472.11 29...\n11 MULTIPOLYGON (((23332.77 30...\n12 MULTIPOLYGON (((26231.96 30...\n13 MULTIPOLYGON (((33214.62 29...\n14 MULTIPOLYGON (((28481.45 30...\n15 MULTIPOLYGON (((28087.34 30...\n16 MULTIPOLYGON (((14557.7 304...\n17 MULTIPOLYGON (((15772.59 21...\n18 MULTIPOLYGON (((19843.41 21...\n19 MULTIPOLYGON (((29712.51 23...\n20 MULTIPOLYGON (((26858.1 266...\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(mpsz, 10) # Default is 6 rows, constrected by the global setting(10 rows) as well\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 10 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 20660.53 ymin: 28369.47 xmax: 32362.39 ymax: 30684.55\nProjected CRS: SVY21\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\n## 3.3 Importing Attribute Data into R\n\nNext, we will use **`read_csv()`** function of `readr` package to import  ***respopagsex2011to2020.csv*** file into RStudio and save the file into an R dataframe called ***popdata***.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n## 3.4 Data Preparation\n\nBefore a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables **PA**, **SZ**, **YOUNG**, **ECONOMY** **ACTIVE**, **AGED**, **TOTAL**, **DEPENDENCY**.\n\n-   `PA`: Planning Area,\n\n-   `SZ`: Subzone,\n\n-   `YOUNG`: age group 0 to 4 until age groyup 20 to 24,\n\n-   `ECONOMY ACTIVE`: age group 25-29 until age group 60-64,\n\n-   `AGED`: age group 65 and above,\n\n-   `TOTAL`: all age group, and\n\n-   `DEPENDENCY`: the ratio between young and aged against economy active group\n\n### 3.4.1 Data Wrangling\n\nThe following data wrangling and transformation functions will be used:\n\n-   ***pivot_wider()*** of **`tidyr`** package, and\n\n-   ***mutate()***, ***filter()***, ***group_by()*** and ***select()*** of **`dplyr`** package\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n### 3.4.2 Joining the attribute data and geospatial data\n\nBefore we can perform the georelational join, we need to convert the values in `PA` and `SZ` fields to uppercase. This is because the values of `PA` and `SZ` fields are made up of upper- and lowercase. `SUBZONE_N` and `PLN_AREA_N` are in uppercase.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\nAfter convert `PA` and `SZ` field to uppercase, then we can use `left_join()` of **dplyr**  to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\nThing to learn from the code chunk above:\n\n-   *left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n```\n:::\n\n\n::: callout-tip\nRDS files take less space than textual data formats like CSV, JSON(CSV file is about 64MB and RDS file only 1MB). RDS also reads and writes faster than those.\n:::\n\n# 4. Choropleth Mapping Geospatial Data Using *`tmap`*\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\nTwo approaches can be used to prepare thematic map using *tmap*, they are:\n\n-   Plotting a thematic map quickly by using *qtm()*.\n\n-   Plotting highly customisable thematic map by using tmap elements.\n\n## 4.1 Plotting a choropleth map quickly by using *`qtm()`*\n\nThe easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n-   *tmap_mode()* with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\n\n-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)\n\n## 4.2 Creating a choropleth map by using *`tmap`*’s elements\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, **tmap**’s drawing elements should be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nNext, we will be using `tmap` functions that can be used to plot additional element in the map above.\n\n### 4.2.1 Drawing a base map using `tm_shape()`\n\nThe basic building block of **tmap** is *`tm_shape()`* followed by one or more layer elemments such as *`tm_fill()`* and *`tm_polygons()`*`.`\n\n`tm_shape()` is used to define the input data (i.e *mpsz_pop2020*) and *`tm_polygons()`* is used to draw the planning subzone polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### 4.2.2 Drawing a choropleth map using `tm_polygons()`\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nThings to learn from *tm_polygons()*:\n\n-   The default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.\n\n-   The default colour scheme used is `YlOrRd` of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\n\n-   By default, Missing value will be shaded in grey.\n\n### 4.2.3 Drawing a choropleth map using *`tm_fill()`* and `tm_border()`\n\nActually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\n\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\") + \n  tm_borders(col = \"blue\" ,lwd = 0.5, lty = \"longdash\",  alpha = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nNotice that light-gray border lines have been added on the choropleth map.\n\n::: callout-note\nThe *alpha* argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\n\nBeside *alpha* argument, there are three other arguments for *tm_borders()*, they are:\n\n-   *col* = border colour,\n\n-   *lwd* = border line width. The default is 1, and\n\n-   *lty* = border line type. The default is “solid”. **`\"blank\"`**, **`\"solid\"`**, **`\"dashed\"`**, **`\"dotted\"`**, **`\"dotdash\"`**,**`\"longdash\"`**, or **`\"twodash\"`**, where **`\"blank\"`** uses ‘invisible lines’ (i.e., does not draw them).\n:::\n\n## 4.3 Data classification methods of *`tmap`*\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\n\n**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.\n\nTo define a data classification method, the *style* argument of *`tm_fill()`* or *`tm_polygons()`* will be used.\n\n### 4.3.1 Plotting choropleth maps with built-in classification methods\n\n**tmap** provides a total ten data classification methods:\n\n-   *quantile*,\n\n-   *equal*,\n\n-   *pretty* (default),\n\n-   *fixed*,\n\n-   *sd*,\n\n-   *kmeans*,\n\n-   *hclust*,\n\n-   *bclust*,\n\n-   *fisher*, and\n\n-   *jenks*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n*equal* data classification method is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(col = \"red\" ,lwd = 0.5, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n::: callout-tip\nThe distribution of quantile data classification method are more evenly distributed then equal data classification method.\n:::\n\nOther data classification methods.\n\n*`pretty(default)`*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n*`fixed`*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fixed\",\n          breaks = c(0, 0.5, 1, 1.5, 2, Inf)) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nFor style = \"fixed\", we need to provide a set of fixed breaks manually. If breaks are not supplied, it leads to `Error in if (lw == -Inf) lw <- breaks[2] : argument is of length zero`, as the function doesn't know how to classify the data.\n\n\\*\\*\\* With help from ChatGPT \\*\\*\\*\n:::\n\n*`sd`*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n*`kmeans`*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n*`hclust`*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n*`bclust`*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n```\n\n\n:::\n:::\n\n\n*`fisher`*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n*`jenks`*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nExploring using the same classification methods with different numbers of classes(i.e. 2,6,10,20)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          palette = \"Dark2\", \n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          palette = \"Dark2\", \n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          palette = \"Dark2\", \n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          palette = \"Dark2\", \n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n::: callout-tip\nWhen n increase, there will be more classification, which will be able to provide more insightful information for us to analysis.\n:::\n\n### 4.3.2 Plotting choropleth map with custom break\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the *breaks* argument to the *tm_fill()*. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).\n\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of **DEPENDENCY** field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n```\n\n\n:::\n:::\n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\nNow, we will plot the choropleth map\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Values have found that are higher than the highest break\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n## 4.4 Colour Scheme\n\n**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.\n\n### 4.4.1 Using ColourBrewer palette\n\nTo change the colour, we assign the preferred colour to *palette* argument of *tm_fill()*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nTo reverse the colour shading, add a \"-\" prefix\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n## 4.5 Map Layouts\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n### 4.5.1 Map Legend\n\nIn **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n### 4.5.2 Map style\n\n**tmap** allows a wide variety of layout settings to be changed. They can be called by using *tmap_style().*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"classic\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ncurrent tmap style is \"classic\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"cobalt\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"cobalt\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"white\", \"gray\", \"natural\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n### 4.5.3 Cartographic Furniture\n\nBeside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\n\nIn the code chunk below, *tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nTo reset the default style\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n:::\n\n\n## 4.6 Drawing Small Multiple Choropleth Maps\n\n**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\nIn **tmap**, small multiple maps can be plotted in three ways:\n\n-   by assigning multiple values to at least one of the asthetic arguments,\n\n-   by defining a group-by variable in *tm_facets()*, and\n\n-   by creating multiple stand-alone maps with *tmap_arrange()*.\n\n### 4.6.1 By assigning multiple values to at least one of the aesthetic arguments\n\nIn this example, small multiple choropleth maps are created by defining ***ncols*** in **`tm_fill()`**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n### 4.6.2 By defining a group-by variable in tm_facets()\n\nIn this example, multiple small choropleth maps are created by using **tm_facets()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n### 4.6.3 By creating multiple stand-alone maps with *tmap_arrange()*\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with **tmap_arrange()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n## 4.7 Mappping Spatial Object Meeting a Selection Criterion\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex02_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n# 5. References\n\nTutorial provided by Professor Kam Tin Seong (SMU) for IS415 - Geospatial Analytics and Application\n\nLink : <https://r4gdsa.netlify.app/chap02.html#by-creating-multiple-stand-alone-maps-with-tmap_arrange>\n\n## 5.1 All about tmap package\n\n-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)\n\n-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html)\n\n-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)\n\n-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)\n\n-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)\n\n-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)\n\n## 5.2 Geosptial data wrangling\n\n-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/index.html)\n\n-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)\n\n-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)\n\n## 5.3 Data wrangling\n\n-   [dplyr](https://dplyr.tidyverse.org/)\n\n-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\n\n-   [tidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)\n",
    "supporting": [
      "Hands-on_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}