{
  "hash": "1c259d3f918d67342543a0c19123b47c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 09: Spatially Constrained Cluster Analysis\"\nauthor: \"Pan Mingwei\"\ndate: \"October 21, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n\nupdate: add date-modified\n\n# 1. Importing the Packages\n\n-   Spatial data handling\n\n    -   **sf** and **spdep**\n\n-   Attribute data handling\n\n    -   **tidyverse**, especially **readr**, **ggplot2** and **dplyr**\n\n    -   **GGally** extension to 'ggplot2'\n\n-   Visualise the result of multivariate data analysis\n\n    -   **factoextra**\n\n-   Choropleth mapping\n\n    -   **tmap**\n\n-   Cluster analysis\n\n    -   **cluster**\n\n    -   **ClustGeo**\n\n    -   **NbClust**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(spdep, tmap, sf, ClustGeo, cluster, factoextra, NbClust,tidyverse, GGally)\n```\n:::\n\n\n\n\n# 2. Importing the Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf <- read_rds(\"data/rds/shan_sf.rds\")\nshan_ict <- read_rds(\"data/rds/shan_ict.rds\")\nshan_sf_cluster <- read_rds(\"data/rds/shan_sf_cluster.rds\")\n```\n:::\n\n\n\n\n# 3. Conventional Hierarchical Clustering\n\n## 3.1 Hierarchical Clustering\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproxmat <- dist(shan_ict, method = 'euclidean') \nhclust_ward <- hclust(proxmat, method = 'ward.D')\ngroups <- as.factor(cutree(hclust_ward, k=6))\n```\n:::\n\n\n\n\n::: callout-note\n-   the **k** argument in `cutree` is different from the **K.max** argument in `clusGap`, as the K.max argument is to define the x-axis of the plot(determine number of cluster to plot in the graph)\n\n-   for **k** argument, the minimum should be 3.\n:::\n\n## 3.2 Append to the geospatial data\n\nAppend the groups field into `shan_sf` and rename the field to a more friendly name.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf_cluster <- cbind (shan_sf,\n                          as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`) %>%\n  select(-c(3:4, 7:9)) %>%\n  rename(TS = TS.x)\n```\n:::\n\n\n\n\n## 3.3 The dendrogram\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hclust_ward, cex=0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## 3.4 Cluster map\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(shan_sf_cluster, \"CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-6-1.png){width=1152}\n:::\n:::\n\n\n\n\n`qtm` is good when we want to have a quick check on the plot, especially for categorical field.\n\n# 4. Spatially Constrained Cluster Analysis\n\n-   SKATAR algorithm of **spdep** packages.\n\n-   hclustgeo of **ClustGeo** packages, a Ward-like hierarchical clustering algorithm\n\n## 4.1 SKATAR method\n\n### 4.1.1 Computing Nearest Neighbours\n\n-   The latest package of spdep, it can take in sf object, so we don't need to convert the sf object to sp object.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.nb <- poly2nb(shan_sf)\nsummary(shan.nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n```\n\n\n:::\n:::\n\n\n\n\n### 4.1.2 Visualising the Neighbours\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf),\n     border=grey(.5))\npts <- st_coordinates( st_centroid(st_geometry(shan_sf)))\nplot(shan.nb,\n     pts,\n     col=\"blue\",\n     add=TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-8-1.png){width=1152}\n:::\n:::\n\n\n\n\n### 4.1.3 Computing Minimum Spanning Tree\n\n#### 4.1.3.1 Calculating Edge Costs\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlcosts <- nbcosts(shan.nb, shan_ict)\n```\n:::\n\n\n\n\n#### 4.1.3.2 Incorporating Edge Cost into a Weight Object\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.w <- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\n-   **style** argument, it should be in binary form =\\> \"B\"\n:::\n\n#### 4.1.3.3 Computing MST\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.mst <- mstree(shan.w)\n```\n:::\n\n\n\n\n#### 4.1.3.4 Visualising MST\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf), \n                 border=gray(.5))\nplot.mst(shan.mst, \n         pts, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-12-1.png){width=1152}\n:::\n:::\n\n\n\n\n### 4.1.4 Computing Spatially Constrained Clusters Using SKATER Method\n\n#### 4.1.4.1 Compute the Spatially Constrained Cluster\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskater.clust6 <- skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n```\n:::\n\n\n\n\n#### 4.1.4.2 Plot SKATER Tree\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(skater.clust6, \n     pts, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE) # this line is to plot on top on the first plot\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-14-1.png){width=1152}\n:::\n:::\n\n\n\n\n### 4.1.5 Visualising the Clusters in Choropleth Map\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroups_mat <- as.matrix(skater.clust6$groups)\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`skater_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"skater_CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-15-1.png){width=1152}\n:::\n:::\n\n\n\n\n## 4.2 Spatially Constrained Clustering: ClustGeo Method\n\n### 4.2.1 Compute Spatial Distance Matrix\n\nTo compute the distance matrix using `st_distance()` of **sf** package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n```\n:::\n\n\n\n\n### 4.2.2 Cluster Graph\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncr <- choicealpha(proxmat, distmat, \n                  range.alpha = seq(0, 1, 0.1), \n                  K=6, graph = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-17-1.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-17-2.png){width=1152}\n:::\n:::\n\n\n\n\n### 4.2.3 Saving clustGeo Output\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.2)\ngroups <- as.factor(cutree(clustG, k=6))\nshan_sf_GclusterGeo <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`clustGeo` = `as.matrix.groups.`)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(shan_sf_GclusterGeo, \"clustGeo\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-19-1.png){width=1152}\n:::\n:::\n\n\n\n\n### 4.2.4 Characterising the Clusters\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggparcoord(data = shan_sf_GclusterGeo, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ clustGeo) + \n  theme(axis.text.x = element_text(angle = 30))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-20-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}