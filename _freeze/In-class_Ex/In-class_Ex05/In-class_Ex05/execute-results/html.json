{
  "hash": "5ad998e5e8a9175cb568c6c5f504a7a0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class Exercise 05: Spatial Weights and Applications\"\nauthor: \"Pan Mingwei\"\ndate: \"September 16, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n::: callout-note\n**Geographically referenced attribute** =\\> attribute that have a geometry attached to it. e.g polygon\n\nTwo type of relationship:\n\n1.  Adjacency base =\\> sharing a common boundary\n\n    -   Binary Matrix =\\> 0, 1; If the polygon is adjacency then it will be 1, else it will be 0.\n\n2.  Distance base =\\> easy for lines but difficult for polygon.\n\n    -   Where is the start point for polygon? =\\> define a centre point for polygon.\n\n    -   Limitation : To define the centre point for polygon, as each polygon have different size, so if using fixed distance, then sometime it would not be effective.\n\n    -   Two type of matrices:\n\n        -   Binary =\\> if the target is within the distance, then it will be 1\n\n        -   Inverse Weight =\\> The closer to the target the higher the value will be.\n\nContiguity Neighbours:\n\n-   Rooks Case (Commonly used) =\\> sharing common edge.\n\n-   Bishops Case =\\> share the boundary at the corner.\n\n-   Queen Case (Commonly used) =\\> sharing both edge and corner.\n\nLagged Contiguity(Only for adjacency base):\n\n-   Different contiguity neighbours case used will affect the lagged contiguity.\n\n-   1st order neighbour =\\> immediate neighbor of the target location.\n\n-   2nd order neighbour =\\> immediate neighbor of the 1st order neighbor.\n\n-   **Noted**: if the shape is hexagon, then different contiguity neighbours case would not affect the lagged contiguity.\n:::\n\n# 1. Overview\n\n-   import geospatial data using appropriate function(s) of **sf** package,\n\n-   import csv file using appropriate function of **readr** package,\n\n-   perform relational join using appropriate join function of **dplyr** package,\n\n-   compute spatial weights using appropriate functions of **spdep** package, and\n\n-   calculate spatially lagged variables using appropriate functions of **spdep** package.\n\n-   using **GWmodel** for performing Geographically Weighted (GW) analyses, \n\n-   using **knitr** to integrate R code with narrative text, tables,\n\n# \n\n# 2. The Data\n\n-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\n\n-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n## 2.1 Loading the package\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse,knitr, GWmodel)\n```\n:::\n\n\n## 2.2 Preparing the Data\n\nTo import Hunan shapefile.\n\n**Note**: Good to add \\_sf in naming the variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n```\n:::\n\n\nTo import 2012 hunan GPD data from CSV.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n\nJoin hunan_sf and hunan2012.\n\n**Note**: In order to join the data set, need to check whether there is a common field from the two data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- left_join(hunan_sf,hunan2012) %>%\n  select(1:3, 7, 15, 16, 31, 32)\n```\n:::\n\n\nWrite the object into RDS format.\n\n**Note**: Good to write the data set into RDS, so that we can just read the data set each time and don't need to run the above code again every time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(hunan_sf,\"data/rds/hunan_sf.rds\")\n```\n:::\n\n\nTo read the data set from RDS file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# By adding echo: false => the code chunk would not be shown\nhunan_sf <- read_rds(\"data/rds/hunan_sf.rds\")\n```\n:::\n\n\n## 2.3 Converting to SpatialPolygonDataFrame\n\nAs for GWmodel cannot work well with sf object. Therefore, we need to convert sf object into sp object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan_sf %>%\n  as_Spatial()\n```\n:::\n\n\n# 3. Geographically Weighted Summary Statistics\n\n## 3.1 Determine adaptive bandwidth\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1,\n                 data = hunan_sp,\n                 approach = \"AIC\",\n                 adaptive = TRUE,\n                 kernel = \"bisquare\",\n                 longlat = T) # note because we never do projection, by having this means it will help to project the longlat and the unit will be in km.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1,\n                 data = hunan_sp,\n                 approach = \"CV\",\n                 adaptive = TRUE,\n                 kernel = \"bisquare\",\n                 longlat = T) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n\n::: callout-note\nNotice that even we use different approach, both recommend the same number of neightbours =\\> 22\n:::\n\n## 3.2 Fixed bandwidth\n\nBy using fixed bandwidth, it will recommend the fixed distance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_fixed_CV <- bw.gwr(GDPPC ~ 1,\n                 data = hunan_sp,\n                 approach = \"CV\",\n                 adaptive = FALSE, # calculate fixed distance\n                 kernel = \"bisquare\",\n                 longlat = T) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_fixed_AIC <- bw.gwr(GDPPC ~ 1,\n                 data = hunan_sp,\n                 approach = \"AIC\",\n                 adaptive = FALSE, # calculate fixed distance\n                 kernel = \"bisquare\",\n                 longlat = T) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n\n\n:::\n:::\n\n\nThe unit is in km.\n\nNotice that the different is very huge.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_fixed_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76.29126\n```\n\n\n:::\n\n```{.r .cell-code}\nbw_fixed_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 160.5517\n```\n\n\n:::\n:::\n\n\n## 3.2 Computing geographically weighted summary statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n```\n:::\n\n\n::: callout-note\nFor `bw`, if the adaptive field need to be the same, as **TRUE** is number of neightbour and **FALSE** is the distance.\n\n`gwss` =\\> the calculation will include itself.\n:::\n\n## 3.3 Preparing the output data\n\nExtract SDF object from gwstat into data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\n```\n:::\n\n\n::: callout-warning\nDo not apply sorting when extracting into the data frame. It will affect the data when we doing `cbind`.\n:::\n\n`cbind` append the **gwstat_df** into **hunan_sf**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat <- cbind(hunan_sf,gwstat_df)\n```\n:::\n\n\n## 3.4 Visualising geographically weighted summary statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50,\n            legend.width = 1.50,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex05_files/figure-html/unnamed-chunk-17-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}