{
  "hash": "45e0510b0221c2ad43f19aa52d71177a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 1: Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar\"\nauthor: \"Pan Mingwei\"\ndate: \"September 5, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n  cache: true\nformat: \n  html: \n    code-fold: false\n    code-summary: \"Click to expand/collapse code\"\n---\n\n\n# 1. Overview\n\nMillions of people have their lives shattered by armed conflict – wars – every year.\n\nArmed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades.\n\n## 1.1 Objective\n\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, I will apply spatial point patterns analysis methods to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar.\n\n## 1.2 Data\n\n### 1.2.1 Armed Conflict Data\n\nFor the purpose of this assignment, armed conflict data of Myanmar between 2021-2024 from [Armed Conflict Location & Event Data (ACLED)](https://acleddata.com/), an independent, impartial, international non-profit organization collecting data on violent conflict and protest in all countries and territories in the world, should be used.\n\nIn terms of event types, I will focus on at least four main event types, namely: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\n\nIn terms of study period, I will focus on quarterly armed conflict events from January 2021 until June 2024.\n\n### 1.2.2 GIS Data\n\nI will be using [**Myanmar State and Region Boundaries with Sub-regions MIMU v9.4**](http://geonode.themimu.info/layers/geonode%3Ammr_polbnda2_adm1_250k_mimu_1) because it provides more detailed geospatial data, including sub-regions.\n\n## 1.3 Importing Packages\n\nThe following R packages are used for this assignment:\n\n-   **sf**, for importing, managing and processing geospatial data.\n\n-   **tidyverse**, for importing, wrangling and visualising data.\n\n-   **tmap**, to create thematic maps.\n\n-   **spatstat**, for point pattern analysis.\n\n-   **raster**,to reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster).\n\n-   **sparr**, provides functions for kernel density estimation.\n\n-   [**magick**](https://cran.r-project.org/web/packages/magick/vignettes/intro.html), modern and simple toolkit for image processing in R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,tidyverse,tmap,spatstat,sparr,raster,magick)\n```\n:::\n\n\n# 2. Data Wrangling\n\n## 2.1 Aspatial Data\n\n### 2.1.1 Importing Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\")\n```\n:::\n\n\n### 2.1.2 CRS Adjustment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System: NA\n```\n\n\n:::\n:::\n\n\nAs the current **acled_sf** do not have CRS, which means there is no geometry column in the sf object. Therefore, before we change the CRS, we need to convert the **longitude** and **latitude** columns into a **spatial format**. Since Myanmar is UTM zone 47(EPSG:32647), lets create the geometry column and transform the CRS to `UTM Zone 47N`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs=4326) %>%\n  st_transform(crs = 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            MEMBER[\"World Geodetic System 1984 (G2296)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nWe can see that now the CRS is `UTM Zone 47` now.\n\n### 2.1.3 Check and Clean Aspatial Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(acled_sf, n =1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 29 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 214961 ymin: 2452068 xmax: 214961 ymax: 2452068\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 30\n  event_id_cnty event_date    year time_precision disorder_type      event_type\n  <chr>         <chr>        <dbl>          <dbl> <chr>              <chr>     \n1 MMR64313      30 June 2024  2024              1 Political violence Battles   \n# ℹ 24 more variables: sub_event_type <chr>, actor1 <chr>, assoc_actor_1 <chr>,\n#   inter1 <dbl>, actor2 <chr>, assoc_actor_2 <chr>, inter2 <dbl>,\n#   interaction <dbl>, civilian_targeting <chr>, iso <dbl>, region <chr>,\n#   country <chr>, admin1 <chr>, admin2 <chr>, admin3 <chr>, location <chr>,\n#   geo_precision <dbl>, source <chr>, source_scale <chr>, notes <chr>,\n#   fatalities <dbl>, tags <chr>, timestamp <dbl>, geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n\nBy checking the data, we can see that the data type for **event_date** was in Character instead of Date. And there is a timestamp field, in order to figure out what is this field for, we need to convert it to human readable as well.\n\nLets convert the data type for **event_date** to Date and **timestamp** to normal date time format, so we handle the field easier at later stage.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  mutate(event_date = dmy(event_date)) %>%\n  mutate(timestamp = as.POSIXct(timestamp, origin = \"1970-01-01\", tz = \"Asia/Yangon\"))\n```\n:::\n\n\nBy looking at the data, it seems that the **timestamp** field was the date time when the data was recorded. Therefore, this field would not be useful for us.\n\n### 2.1.4 Data Transformation\n\nSince we will be focus on quarterly, lets extract **year** and **quarter** from **event_date** field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  mutate(year = year(event_date),\n         quarter = quarter(event_date))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n event_id_cnty        event_date              year      time_precision \n Length:42608       Min.   :2021-01-01   Min.   :2021   Min.   :1.000  \n Class :character   1st Qu.:2022-01-10   1st Qu.:2022   1st Qu.:1.000  \n Mode  :character   Median :2022-10-13   Median :2022   Median :1.000  \n                    Mean   :2022-10-29   Mean   :2022   Mean   :1.053  \n                    3rd Qu.:2023-08-29   3rd Qu.:2023   3rd Qu.:1.000  \n                    Max.   :2024-06-30   Max.   :2024   Max.   :3.000  \n disorder_type       event_type        sub_event_type        actor1         \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n assoc_actor_1          inter1         actor2          assoc_actor_2     \n Length:42608       Min.   :1.000   Length:42608       Length:42608      \n Class :character   1st Qu.:1.000   Class :character   Class :character  \n Mode  :character   Median :1.000   Mode  :character   Mode  :character  \n                    Mean   :1.947                                        \n                    3rd Qu.:3.000                                        \n                    Max.   :8.000                                        \n     inter2       interaction    civilian_targeting      iso     \n Min.   :0.000   Min.   :10.00   Length:42608       Min.   :104  \n 1st Qu.:1.000   1st Qu.:13.00   Class :character   1st Qu.:104  \n Median :3.000   Median :17.00   Mode  :character   Median :104  \n Mean   :3.597   Mean   :18.86                      Mean   :104  \n 3rd Qu.:7.000   3rd Qu.:17.00                      3rd Qu.:104  \n Max.   :8.000   Max.   :80.00                      Max.   :104  \n    region            country             admin1             admin2         \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    admin3            location         geo_precision      source         \n Length:42608       Length:42608       Min.   :1.000   Length:42608      \n Class :character   Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Mode  :character   Median :1.000   Mode  :character  \n                                       Mean   :1.495                     \n                                       3rd Qu.:2.000                     \n                                       Max.   :3.000                     \n source_scale          notes             fatalities         tags          \n Length:42608       Length:42608       Min.   :  0.00   Length:42608      \n Class :character   Class :character   1st Qu.:  0.00   Class :character  \n Mode  :character   Mode  :character   Median :  0.00   Mode  :character  \n                                       Mean   :  1.27                     \n                                       3rd Qu.:  1.00                     \n                                       Max.   :201.00                     \n   timestamp                               geometry        quarter     \n Min.   :2021-01-19 23:11:26.00   POINT        :42608   Min.   :1.000  \n 1st Qu.:2023-12-12 07:49:10.00   epsg:32647   :    0   1st Qu.:2.000  \n Median :2024-04-24 01:54:16.00   +proj=utm ...:    0   Median :2.000  \n Mean   :2023-12-06 06:04:20.38                         Mean   :2.475  \n 3rd Qu.:2024-06-26 04:30:11.00                         3rd Qu.:4.000  \n Max.   :2024-09-04 08:18:12.00                         Max.   :4.000  \n```\n\n\n:::\n:::\n\n\n#### 2.1.4.1 Handling Categorical Data\n\nSince there are fields in the dataset are categorical related fields and they are in character vectors. To make sure consistency of the data, we can use `as.factor` function to convert the variable to categorical variable. These fields are: **disorder_type**, **event_type**, **sub_event_type**, **actor1**, **actor2**, **admin1** , **source_scale** etc.\n\nBy doing so, it makes easier to group and summarize data by categories and will provide more consistent behavior.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  mutate( event_type = as.factor(event_type),\n          admin1 = as.factor(admin1)\n         )\n```\n:::\n\n\n::: callout-note\nAs there are other categorical fields, but since not all the field will be used and useful(as some of the field have too many level), hence I only factor fields that will be useful for the next stage.\n:::\n\nTo check the levels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(acled_sf$event_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Battles\"                    \"Explosions/Remote violence\"\n[3] \"Strategic developments\"     \"Violence against civilians\"\n```\n\n\n:::\n:::\n\n\n## 2.2 Geospatial Data\n\n### 2.2.1 Importing Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsrb_sub_reg <- st_read(dsn = \"data/geospatial/mmr_polbnda2_adm1_250k_mimu_1\", layer = \"mmr_polbnda2_adm1_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `/Users/mingwei/Desktop/SMU/Y3S1/IS415/xXxPMWxXx/IS415-GAA/Take-home_Ex/Take-home_Ex01/data/geospatial/mmr_polbnda2_adm1_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n### 2.2.2 CRS Adjustments\n\nLets check what is the CRS for `msrb_sub_reg`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(msrb_sub_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\nAs from above, we can see that the original data is geographic coordinate system. We need to convert it to projected coordinate system. Since Myanmar is UTM zone 47(EPSG:32647), lets transform the CRS to `UTM Zone 47N`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsrb_sub_reg <- st_transform(msrb_sub_reg, crs = 32647)\nst_crs(msrb_sub_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            MEMBER[\"World Geodetic System 1984 (G2296)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n### 2.2.3 Check and Clean Geospatial Data\n\nTo ensure that the geometries in the shapefile are valid and correct them if any invalid geometries found.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check if the data are valid\nst_is_valid(msrb_sub_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Fix invalid data\nmsrb_sub_reg <- st_make_valid(msrb_sub_reg)\n```\n:::\n\n\n### 2.2.4 Standardize Column Names\n\nWe can see that the column name are not descriptive.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsrb_sub_reg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 18 features and 6 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -210008.6 ymin: 1072026 xmax: 724647.6 ymax: 3158467\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n   OBJECTID          ST ST_PCODE  ST_RG               ST_MMR PCode_V\n1         1  Ayeyarwady   MMR017 Region       ဧရာဝတီတိုင်းဒေသကြီး     9.4\n2         2 Bago (East)   MMR007 Region   ပဲခူးတိုင်းဒေသကြီး (အရှေ့)     9.4\n3         3 Bago (West)   MMR008 Region ပဲခူးတိုင်းဒေသကြီး (အနောက်)     9.4\n4         4        Chin   MMR004  State            ချင်းပြည်နယ်     9.4\n5         5      Kachin   MMR001  State            ကချင်ပြည်နယ်     9.4\n6         6       Kayah   MMR002  State            ကယားပြည်နယ်     9.4\n7         7       Kayin   MMR003  State             ကရင်ပြည်နယ်     9.4\n8         8      Magway   MMR009 Region        မကွေးတိုင်းဒေသကြီး     9.4\n9         9    Mandalay   MMR010 Region      မန္တလေးတိုင်းဒေသကြီး     9.4\n10       10         Mon   MMR011  State              မွန်ပြည်နယ်     9.4\n                         geometry\n1  MULTIPOLYGON (((-5792.088 1...\n2  POLYGON ((203949.9 2157841,...\n3  POLYGON ((153405.1 2125288,...\n4  POLYGON ((-72918.03 2675831...\n5  POLYGON ((362696.3 3156293,...\n6  POLYGON ((309155.7 2211716,...\n7  MULTIPOLYGON (((373550.1 18...\n8  POLYGON ((-1717.607 2525523...\n9  POLYGON ((208184.3 2614332,...\n10 MULTIPOLYGON (((350576.4 17...\n```\n\n\n:::\n:::\n\n\nRename the column name to more descriptive name and remove not useful column .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsrb_sub_reg <- msrb_sub_reg %>%\n  rename(state_name = ST,\n         state_pcode = ST_PCODE,\n         state_region = ST_RG) %>%\n  dplyr::select(-ST_MMR)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(msrb_sub_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    OBJECTID      state_name        state_pcode        state_region      \n Min.   : 1.00   Length:18          Length:18          Length:18         \n 1st Qu.: 5.25   Class :character   Class :character   Class :character  \n Median : 9.50   Mode  :character   Mode  :character   Mode  :character  \n Mean   : 9.50                                                           \n 3rd Qu.:13.75                                                           \n Max.   :18.00                                                           \n    PCode_V             geometry \n Min.   :9.4   MULTIPOLYGON : 6  \n 1st Qu.:9.4   POLYGON      :12  \n Median :9.4   epsg:32647   : 0  \n Mean   :9.4   +proj=utm ...: 0  \n 3rd Qu.:9.4                     \n Max.   :9.4                     \n```\n\n\n:::\n:::\n\n\n### 2.2.5 Myanmar Boundaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(msrb_sub_reg))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=1152}\n:::\n:::\n\n\n### 2.2.6 Myanmar Boundaries With State Name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = msrb_sub_reg) +\n  geom_sf(aes(fill = state_name), color = \"black\") + \n  geom_sf_label(aes(label = state_name), size = 4, color = \"black\",fill = \"white\", label.size = 0.5) + \n  scale_fill_hue(n = length(unique(msrb_sub_reg$state_name))) +\n  theme(legend.position = \"right\") +\n  ggtitle(\"Myanmar Administrative Boundaries\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n# 3 Kernel Density Estimation\n\n## 3.1 Remove island\n\nAs we can see from above, the Myanmar boundaries have many islands, which will affect us as when plot the points. Therefore, by removing smaller island,it will help us in visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge adj polygons\nmerged_msrb <- st_union(msrb_sub_reg) %>%\n  st_cast(\"POLYGON\")\n# Convert back to sf object\nmerged_msrb <- st_as_sf(merged_msrb)\n# set threshold\nmin_area_threshold <- units::set_units(100, \"km^2\")\n\nareas <- st_area(merged_msrb)\n\n# Filter out polygons smaller than the threshold\nfiltered_msrb <- merged_msrb %>% \n  filter(areas > min_area_threshold)\n\nplot(st_geometry(filtered_msrb), main = \"Without Small Islands\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(filtered_msrb, \"data/rds/filtered_msrb.rds\")\n```\n:::\n\n\n## 3.2 Create owin Object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsrb_owin <- as.owin(filtered_msrb)\nplot(msrb_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=1152}\n:::\n:::\n\n\n## 3.3 Determine Best Sigma And Kernel\n\nTo find out which sigma and kernel to use for KDE, we will try various type and see which give us the best visualization. We will use data that is battles event in 2021 Q1 as the sample data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021_Q1 <- acled_sf %>%\n  filter(event_type == 'Battles' & year == 2021 & quarter == 1)\n\nbattles_2021_Q1_ppp <- as.ppp(st_coordinates(battles_2021_Q1), st_bbox(battles_2021_Q1))\nany(duplicated(battles_2021_Q1_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nUsing *`jittering`*, to add a small perturbation to the duplicate points so that they do not occupy the exact same space.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021_Q1_ppp <- rjitter(battles_2021_Q1_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nany(duplicated(battles_2021_Q1_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021_Q1_ppp = battles_2021_Q1_ppp[msrb_owin]\nplot(battles_2021_Q1_ppp, pch = 20, cex = 1)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-26-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021_Q1_ppp = battles_2021_Q1_ppp[msrb_owin]\n```\n:::\n\n\n### 3.3.1 Comparing Different Sigma\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))  # adjust the margin values\n\nplot(density(battles_2021_Q1_ppp, sigma = bw.ppl, edge = TRUE, kernel = \"gaussian\"), main = \"PPL\")\nplot(density(battles_2021_Q1_ppp, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\"), main = \"CvL\")\nplot(density(battles_2021_Q1_ppp, sigma = bw.scott, edge = TRUE, kernel = \"gaussian\"), main = \"Scott\")\nplot(density(battles_2021_Q1_ppp, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\"), main = \"Diggle\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=1152}\n:::\n:::\n\n\n::: callout-note\nAs can be seen above, among the four types of sigma, `PPL` provides the best visualization. Both Scott and CvL methods result in too much spread, while Diggle makes it difficult to see the points in the bottom part of the plot.\n:::\n\n### 3.3.2 Comparing Different Kernel\n\nCheck the bandwidth for `bw.ppl`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw <- bw.ppl(battles_2021_Q1_ppp)\nbw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n43203.34 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rescale the measurement unit\nbattles_2021_Q1_ppp.km <- rescale(battles_2021_Q1_ppp, 55000, \"km\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n\nplot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = \"gaussian\"), main = \"Gaussian\")\nplot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = \"epanechnikov\"), main = \"Epanechnikov\")\nplot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = \"quartic\"), main = \"Quartic\")\nplot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = \"disc\"), main = \"Disc\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=1152}\n:::\n:::\n\n\n::: callout-note\nAmong the four kernels, the `Gaussian` kernel provides the smoothest visualization. Therefore, we will use Gaussian kernel for our analysis.\n:::\n\n## 3.4 AY2021\n\nAs I am interested in understanding an overall picture of the conflict situation each year, including how different types of conflicts happen concurrently. Therefore, I will analysis it by year and event type. By doing this way it will give me the following pros and cons:\n\n-   Pros:\n\n    -   **Holistic View**: I can compare multiple event types within the same time frame, identifying relationships or patterns between them.\n\n    -   **Comprehensive Spatial Understanding**: Provide a snapshot of all event types within a year, is there any interactions between event type. (e.g. Battles occur near Violence against civilians)\n\n-   Cons:\n\n    -   **Temporal Trends Less Visible**: This way does not provide insight into how a specific event type evolves over the years.\n\n### 3.4.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nevent_types <- c(\"Battles\", \"Explosions/Remote violence\", \"Strategic developments\", \"Violence against civilians\")\n\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2021 & quarter == 1)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot KDE\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2021 Q1 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=1152}\n:::\n:::\n\n\n### 3.4.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2021 & quarter == 2)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2021 Q2 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=1152}\n:::\n:::\n\n\n### 3.4.3 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2021 & quarter == 3)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2021 Q3 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=1152}\n:::\n:::\n\n\n### 3.4.4 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2021 & quarter == 4)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2021 Q4 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-1.png){width=1152}\n:::\n:::\n\n\n::: callout-tip\n## 2021 Insight\n\n-   In Q1 and Q2 of 2021, we can observe that **Battles** and **Explosions/Remote Violence** tend to occur in similar locations(the boundary between Kachin state and Shan state; Rakhine State and the boundary between Kayin State, Mon State and Yangon Division), suggesting a closer relationship between these two event type.\n\n-   On the other hand, **Strategic Developments** and **Violence Against Civilians** appear to be spatially correlated with each other, mostly at the boundary between Magway Division and Mandalay Division , but less so with **Battles** and **Explosions/Remote Violence.**\n\n-   By Q3 and Q4, as the frequency of conflicts increase, the spatial distribution of all four event type begins to converge mostly at the boundary between Magway Division and Mandalay Division. This suggests that these events are increasingly co-occurring in the similar geographic areas.\n:::\n\n## 3.5 AY2022\n\n### 3.5.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2022 & quarter == 1)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2022 Q1 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-36-1.png){width=1152}\n:::\n:::\n\n\n### 3.5.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2022 & quarter == 2)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2022 Q2 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-37-1.png){width=1152}\n:::\n:::\n\n\n### 3.5.3 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2022 & quarter == 3)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2022 Q3 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-38-1.png){width=1152}\n:::\n:::\n\n\n### 3.5.4 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2022 & quarter == 4)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2022 Q4 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-39-1.png){width=1152}\n:::\n:::\n\n\n::: callout-tip\n## 2022 Insight\n\n-   In 2022, conflict levels remained high across all four event types. Most conflicts continued to occur along the boundary between **Magway Division** and **Mandalay Division** (central region). Toward end of the year, there was a noticeable increase in conflicts in the southern region, particularly in Battles and Violence Against Civilians events.\n:::\n\n## 3.6 AY2023\n\n### 3.6.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2023 & quarter == 1)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2023 Q1 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-40-1.png){width=1152}\n:::\n:::\n\n\n### 3.6.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2023 & quarter == 2)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2023 Q2 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-41-1.png){width=1152}\n:::\n:::\n\n\n### 3.6.3 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2023 & quarter == 3)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2023 Q3 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-42-1.png){width=1152}\n:::\n:::\n\n\n### 3.6.4 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2023 & quarter == 4)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2023 Q4 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-43-1.png){width=1152}\n:::\n:::\n\n\n::: callout-tip\n## 2023 Insight\n\n-   Overall in 2023, most of the conflict for the four type continued to occur along the boundary between **Magway Division** and **Mandalay Division** (Central Region).\n\n-   However, we can see a decreasing trend in Strategic Developments and Violence Against Civilians (can see from the scale bar at the side)\n\n-   Conversely, Battles and Explosions/Remote Violence increased, with these events gradually shifting toward the boundary between **Kachin State** and **Shan State** (North-Ease Region)by the end of the year.\n:::\n\n## 3.7 AY2024\n\n### 3.7.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2024 & quarter == 1)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2024 Q1 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-44-1.png){width=1152}\n:::\n:::\n\n\n### 3.7.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  filtered_data <- acled_sf %>%\n    filter(event_type == event & year == 2024 & quarter == 2)\n  \n  # Convert to ppp format\n  ppp_data <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))\n  \n  # Handle duplicated points\n  ppp_data <- rjitter(ppp_data, retry = TRUE, nsim = 1, drop = TRUE)\n  \n  # Extract conflict Event located within Myanmar\n  ppp_data <- ppp_data[msrb_owin]\n  \n  # Re-scale\n  ppp_data.km <- rescale(ppp_data, 55000, \"km\")\n  \n  # Plot density\n  plot(density(ppp_data.km, \n               sigma = bw.ppl, \n               edge = TRUE, \n               kernel = \"gaussian\"), \n       main = paste(\"2024 Q2 -\", event))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-45-1.png){width=1152}\n:::\n:::\n\n\n::: callout-tip\n## 2024 Insight\n\n-   In the first half of 2024, conflict trends remained similar to those of 2023, with the **Central region** being the primary hotspot, followed by the **Southern region**. However, there was a significant increase in conflict in **Rakhine State** during this period.\n\n-   In term of co-relation between event types, **Battles** and **Explosions/Remote Violence** remained strongly correlated, while **Strategic Developments** and **Violence Against Civilians** also showed a continued correlation.\n:::\n\n# 4. Second-Order Spatial Point Pattern Analysis\n\nFor 2nd-order spatial point pattern analysis, each function(G,F,K,L) has their specific purpose:\n\n-   `G-function`: Measure the distribution of distance from random points to the nearest event points. Helps in understanding how clustered points are. E.g. 1 to 500 (**Commonly used**)\n\n-   `F-function`: Measures the distance from event points to random points. Complements the G-function, offering another way to detect clustering.\n\n-   `K-function`: Estimates the number of points within a given distance of each other, providing a more general measure of spatial interaction across multiple scales. E.g.1 to 10, 10 to 20 etc . (**Commonly used**)\n\n-   `L-function`: A linear transformation of the K-function that adjusts for boundary effects, making it easier to interpret by creating a straight line under complete spatial randomness.\n\n## 4.1 Choosing Function and Number of Simulations\n\nI want to find out that whether the conflict of the different event type that happen quarterly is evenly distributed or clustered. Since to compute for each event quarterly will need a long time to compute. Therefore, I will use `G-function` for the analysis, as compare to the other three functions, G-function tend to be faster and I will choose 200 for the number of simulations(Note the number of simulation start from 0, so I will use 199 for nsim).\n\n## 4.2 2021\n\n### 4.2.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevent_types <- c(\"Battles\", \"Explosions/Remote violence\", \"Strategic developments\", \"Violence against civilians\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2021 & quarter == 1)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-47-1.png){width=1152}\n:::\n:::\n\n\n### 4.2.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2021 & quarter == 2)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-48-1.png){width=1152}\n:::\n:::\n\n\n### 4.2.3 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2021 & quarter == 3)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-49-1.png){width=1152}\n:::\n:::\n\n\n### 4.2.4 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2021 & quarter == 4)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-50-1.png){width=1152}\n:::\n:::\n\n\n## 4.3 2022\n\n### 4.3.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2022 & quarter == 1)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2,  [3:31 remaining] 3, 4 [3:26 remaining] .6 [3:26 remaining] .8\n [3:24 remaining] .10 [3:16 remaining] .12 [3:08 remaining] .14 [3:04 remaining] .\n16 [2:58 remaining] .18 [2:55 remaining] .20 [2:49 remaining] .22\n [2:46 remaining] .24 [2:40 remaining] .26 [2:35 remaining] .28 [2:32 remaining] .\n30 [2:27 remaining] .32 [2:23 remaining] .34 [2:19 remaining] .36\n [2:15 remaining] .38 [2:13 remaining] .40 [2:09 remaining] .42 [2:06 remaining] .\n44 [2:04 remaining] .46 [2:01 remaining] .48 [1:59 remaining] .50\n [1:57 remaining] .52 [1:54 remaining] .54 [1:52 remaining] .56 [1:50 remaining] .\n58 [1:48 remaining] .60 [1:45 remaining] .62 [1:43 remaining] .64\n [1:41 remaining] .66 [1:39 remaining] .68 [1:37 remaining] .70 [1:35 remaining] .\n72 [1:33 remaining] .74 [1:32 remaining] .76 [1:30 remaining] .78\n [1:28 remaining] .80 [1:26 remaining] .82 [1:24 remaining] .84 [1:23 remaining] .\n86 [1:21 remaining] .88 [1:19 remaining] .90 [1:18 remaining] .92\n [1:16 remaining] .94 [1:14 remaining] .96 [1:13 remaining] .98 [1:11 remaining] .\n100 [1:10 remaining] .102 [1:08 remaining] .104 [1:06 remaining] .106\n [1:05 remaining] .108 [1:03 remaining] .110 [1:02 remaining] .112 [1:00 remaining] .\n114 [59 sec remaining] .116 [57 sec remaining] .118 [56 sec remaining] .120\n [54 sec remaining] .122 [53 sec remaining] .124 [51 sec remaining] .126 [50 sec remaining] .\n128 [48 sec remaining] .130 [47 sec remaining] .132 [45 sec remaining] .134\n [44 sec remaining] .136 [42 sec remaining] .138 [41 sec remaining] .140 [39 sec remaining] .\n142 [38 sec remaining] .144 [37 sec remaining] .146 [35 sec remaining] .148\n [34 sec remaining] .150 [32 sec remaining] .152 [31 sec remaining] .154 [30 sec remaining] .\n156 [28 sec remaining] .158 [27 sec remaining] .160 [26 sec remaining] .162\n [24 sec remaining] .164 [23 sec remaining] .166 [22 sec remaining] .168 [20 sec remaining] .\n170 [19 sec remaining] .172 [18 sec remaining] .174 [16 sec remaining] .176\n [15 sec remaining] .178 [14 sec remaining] .180 [12 sec remaining] .182 [11 sec remaining] .\n184 [10 sec remaining] .186 [8 sec remaining] .188 [7 sec remaining] .190\n [6 sec remaining] .192 [4 sec remaining] .194 [3 sec remaining] .196 [2 sec remaining] .\n198 [1 sec remaining] \n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-51-1.png){width=1152}\n:::\n:::\n\n\n### 4.3.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2022 & quarter == 2)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-52-1.png){width=1152}\n:::\n:::\n\n\n### 4.3.3 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2022 & quarter == 3)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-53-1.png){width=1152}\n:::\n:::\n\n\n### 4.3.4 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2022 & quarter == 4)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-54-1.png){width=1152}\n:::\n:::\n\n\n## 4.4 2023\n\n### 4.4.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2023 & quarter == 1)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-55-1.png){width=1152}\n:::\n:::\n\n\n### 4.4.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2023 & quarter == 2)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-56-1.png){width=1152}\n:::\n:::\n\n\n### 4.4.3 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2023 & quarter == 3)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-57-1.png){width=1152}\n:::\n:::\n\n\n### 4.4.4 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2023 & quarter == 4)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-58-1.png){width=1152}\n:::\n:::\n\n\n## 4.5 2024\n\n### 4.5.1 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2024 & quarter == 1)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-59-1.png){width=1152}\n:::\n:::\n\n\n### 4.5.2 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n# Create a plot for each event type\nfor (event in event_types) {\n  # Filter data by event type\n  G_conflict <- acled_sf %>%\n    filter(event_type == event & year == 2024 & quarter == 2)\n  \n  # Convert to ppp format\n  G_conflict_ppp <- as.ppp(st_coordinates(G_conflict), st_bbox(G_conflict))\n  # Handle duplicated points\n  G_conflict_ppp <- rjitter(G_conflict_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n  # Extract event located within Myanmar\n  G_conflict_ppp = G_conflict_ppp[msrb_owin]\n  # Re-scale\n  G_conflict_ppp.km <- rescale(G_conflict_ppp, 1000, \"km\")\n  # Generate simulations\n  G_conflict.csr <- envelope(G_conflict_ppp.km, Gest, nsim = 199)\n  plot(G_conflict.csr, main = paste(event))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 199 simulations of CSR  ...\n1, 2, 3, 4.6.8.10.12.14.16.18.20.22.24.26.28.30.32.34\n.36.38.40.42.44.46.48.50.52.54.56.58.60.62.64.66.68.70.72.74\n.76.78.80.82.84.86.88.90.92.94.96.98.100.102.104.106.108.110.112.114\n.116.118.120.122.124.126.128.130.132.134.136.138.140.142.144.146.148.150.152.154\n.156.158.160.162.164.166.168.170.172.174.176.178.180.182.184.186.188.190.192.194\n.196.198\n199.\n\nDone.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-60-1.png){width=1152}\n:::\n:::\n\n\n## 4.6 Insight\n\n::: callout-tip\n## 2nd Order Spatial Point Pattern Analysis Insight\n\n-   From the quarterly plots, the observed line in most cases lies above the envelope, indicating clustering in the conflict locations. An exception is seen in **2021 Q1**, where the plot for **violence against civilians** shows the observed line entering the envelope toward the end.\n\n-   Overall, this confirms that the spatial patterns for all four event types exhibit clustering over the years.\n:::\n\n# 5. Spatio-temporal KDE\n\n## 5.1 Prepare the Data\n\nTo only select the necessary fields to save memory and create a year_quarter field ,make it as factors for later to plot the graph.\n\n::: callout-note\nyear_quarter need to be in numeric in order to compute STDKE.\n\n-   2021 Q1 =\\> 2021.00\n\n-   2021 Q2 =\\> 2021.25\n\n-   2021 Q3 =\\> 2021.50\n\n-   2021 Q4 =\\> 2021.75\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  dplyr::select(event_date, event_type, year,quarter) %>%\n  # mutate(year_quarter = as.factor(paste(year, quarter, sep = \"-\")))\n  mutate(year_quarter = round(year + (quarter - 1) / 4, 2) )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_sf <- acled_sf %>%\n    filter(event_type == \"Battles\")\n\nexplosions_sf <- acled_sf %>%\n    filter(event_type == \"Explosions/Remote violence\")\n\nstrategic_sf <- acled_sf %>%\n    filter(event_type == \"Strategic developments\") \n\ncivilians_sf <- acled_sf %>%\n    filter(event_type == \"Violence against civilians\") \n```\n:::\n\n\nSave the Data into rds.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(acled_sf, \"data/rds/acled_sf.rds\")\nwrite_rds(battles_sf, \"data/rds/battles_sf.rds\")\nwrite_rds(explosions_sf, \"data/rds/explosions_sf.rds\")\nwrite_rds(strategic_sf, \"data/rds/strategic_sf.rds\")\nwrite_rds(civilians_sf, \"data/rds/civilians_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_msrb <- read_rds(\"data/rds/filtered_msrb.rds\")\nbattles_sf <- read_rds(\"data/rds/battles_sf.rds\")\nexplosions_sf <- read_rds(\"data/rds/explosions_sf.rds\")\nstrategic_sf <- read_rds(\"data/rds/strategic_sf.rds\")\ncivilians_sf <- read_rds(\"data/rds/civilians_sf.rds\")\n```\n:::\n\n\n## 5.2 Overview\n\nUsing `tmap` packages to plot over 2021 to 2024.\n\n::: panel-tabset\n## Battles\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(filtered_msrb) +\n  tm_polygons() +\n  tm_shape(battles_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-65-1.png){width=1152}\n:::\n:::\n\n\n## Explosions/Remote violence\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(filtered_msrb) +\n  tm_polygons() +\n  tm_shape(explosions_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-66-1.png){width=1152}\n:::\n:::\n\n\n## Strategic developments\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(filtered_msrb) +\n  tm_polygons() +\n  tm_shape(strategic_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-67-1.png){width=1152}\n:::\n:::\n\n\n## Violence against civilians\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(filtered_msrb) +\n  tm_polygons() +\n  tm_shape(civilians_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-68-1.png){width=1152}\n:::\n:::\n\n:::\n\n## 5.3 Visualizing Distribution of Conflict by Quarter\n\n::: panel-tabset\n## Battles\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntm_shape(filtered_msrb) +\n  tm_polygons() +\n  tm_shape(battles_sf) +\n  tm_dots(size = 0.1) +\n  tm_facets(by=\"year_quarter\",\n            free.coords = FALSE, # To avoid the zoom issue of the display map\n            drop.units = TRUE,\n            nrow = 4)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-69-1.png){width=576}\n:::\n:::\n\n\n## Explosions/Remote violence\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntm_shape(filtered_msrb) +\n  tm_polygons() +\n  tm_shape(explosions_sf) +\n  tm_dots(size = 0.1) +\n  tm_facets(by=\"year_quarter\",\n            free.coords = FALSE, # To avoid the zoom issue of the display map\n            drop.units = TRUE,\n            nrow = 4)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-70-1.png){width=576}\n:::\n:::\n\n\n## Strategic developments\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntm_shape(filtered_msrb) +\n  tm_polygons() +\n  tm_shape(strategic_sf) +\n  tm_dots(size = 0.1) +\n  tm_facets(by=\"year_quarter\",\n            free.coords = FALSE, # To avoid the zoom issue of the display map\n            drop.units = TRUE,\n            nrow = 4)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-71-1.png){width=576}\n:::\n:::\n\n\n## Violence against civilians\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntm_shape(filtered_msrb) +\n  tm_polygons() +\n  tm_shape(civilians_sf) +\n  tm_dots(size = 0.1) +\n  tm_facets(by=\"year_quarter\",\n            free.coords = FALSE, # To avoid the zoom issue of the display map\n            drop.units = TRUE,\n            nrow = 4)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-72-1.png){width=576}\n:::\n:::\n\n:::\n\n## 5.3 Computing STDKE by Quarter\n\n### 5.3.1 Creating ppp object.\n\nRemove unwanted fields. As ppp object only need mark field and geometry field from the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_quarter <- battles_sf %>%\n  dplyr::select(year_quarter)\n\nexplosions_quarter <- explosions_sf %>%\n  dplyr::select(year_quarter)\n\nstrategic_quarter <- strategic_sf %>%\n  dplyr::select(year_quarter)\n\ncivilians_quarter <- civilians_sf %>%\n  dplyr::select(year_quarter)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_quarter_ppp <- as.ppp(battles_quarter)\nexplosions_quarter_ppp <- as.ppp(explosions_quarter)\nstrategic_quarter_ppp <- as.ppp(strategic_quarter)\ncivilians_quarter_ppp <- as.ppp(civilians_quarter)\n```\n:::\n\n\nCheck if there is duplicated point.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(battles_quarter_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(duplicated(explosions_quarter_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(duplicated(strategic_quarter_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(duplicated(civilians_quarter_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nHandle duplicated points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_quarter_ppp <- rjitter(battles_quarter_ppp, retry = TRUE, nsim = 1, drop = TRUE)\nexplosions_quarter_ppp <- rjitter(explosions_quarter_ppp, retry = TRUE, nsim = 1, drop = TRUE)\nstrategic_quarter_ppp <- rjitter(strategic_quarter_ppp, retry = TRUE, nsim = 1, drop = TRUE)\ncivilians_quarter_ppp <- rjitter(civilians_quarter_ppp, retry = TRUE, nsim = 1, drop = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(battles_quarter_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(duplicated(explosions_quarter_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(duplicated(strategic_quarter_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(duplicated(civilians_quarter_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n### 5.3.2 Including Owin object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsrb_owin <- as.owin(filtered_msrb)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_quarter_owin <- battles_quarter_ppp[msrb_owin]\nexplosions_quarter_owin <- explosions_quarter_ppp[msrb_owin]\nstrategic_quarter_owin <- strategic_quarter_ppp[msrb_owin]\ncivilians_quarter_owin <- civilians_quarter_ppp[msrb_owin]\n# summary(battles_quarter_owin)\n```\n:::\n\n\n### 5.3.3 Compute STKDE for Events\n\nCompute STKDE for battles event.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Re-scale\nbattles_quarter_owin.km <- rescale(battles_quarter_owin, 1000, \"km\")\nbattles_st_kde <- spattemp.density(battles_quarter_owin.km)\nsummary(battles_st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 56.552 (spatial)\n  lambda = 0.0033 (temporal)\n\nNo. of observations\n  11959 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210.0086, 724.6476] x [1087.92, 3158.467]\n\nTemporal bound\n  [2021, 2025]\n\nEvaluation\n  128 x 128 x 5 trivariate lattice\n  Density range: [0, 0.0001084837]\n```\n\n\n:::\n:::\n\n\nExplosions/remote violence\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Re-scale\nexplosions_quarter_owin.km <- rescale(explosions_quarter_owin, 1000, \"km\")\nexplosions_st_kde <- spattemp.density(explosions_quarter_owin.km)\nsummary(explosions_st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 53.3902 (spatial)\n  lambda = 0.0032 (temporal)\n\nNo. of observations\n  12131 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210.0086, 724.6476] x [1087.92, 3158.467]\n\nTemporal bound\n  [2021, 2025]\n\nEvaluation\n  128 x 128 x 5 trivariate lattice\n  Density range: [0, 0.0001468442]\n```\n\n\n:::\n:::\n\n\nStrategic Developments\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Re-scale\nstrategic_quarter_owin.km <- rescale(strategic_quarter_owin, 1000, \"km\")\nstrategic_st_kde <- spattemp.density(strategic_quarter_owin.km)\nsummary(strategic_st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 52.5945 (spatial)\n  lambda = 0.0032 (temporal)\n\nNo. of observations\n  12022 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210.0086, 724.6476] x [1087.92, 3158.467]\n\nTemporal bound\n  [2021, 2025]\n\nEvaluation\n  128 x 128 x 5 trivariate lattice\n  Density range: [0, 0.0001318966]\n```\n\n\n:::\n:::\n\n\nViolence Against Civilians\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Re-scale\ncivilians_quarter_owin.km <- rescale(civilians_quarter_owin, 1000, \"km\")\ncivilians_st_kde <- spattemp.density(civilians_quarter_owin.km)\nsummary(civilians_st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 59.8792 (spatial)\n  lambda = 0.0054 (temporal)\n\nNo. of observations\n  6167 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210.0086, 724.6476] x [1087.92, 3158.467]\n\nTemporal bound\n  [2021, 2025]\n\nEvaluation\n  128 x 128 x 5 trivariate lattice\n  Density range: [0, 6.605265e-05]\n```\n\n\n:::\n:::\n\n\n### 5.3.4 STDKE Plot\n\nCreate variables for later use. Mainly **times** for the time field for STKDE and **time_labels** for the naming of the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntimes <- seq(2021.00, 2024.25, by = 0.25)\ntime_labels <- sapply(times, function(t) {\n  year <- floor(t)\n  quarter <- ((t - year) * 4) + 1\n  paste(year, \" Q\", quarter, sep = \"\")\n})\n```\n:::\n\n\n::: panel-tabset\n## Battles\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\nfor(i in seq_along(times)){\n  plot(battles_st_kde, times[i] ,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"Battles STKDE in \",time_labels[i])\n       )\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-85-1.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-85-2.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-85-3.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-85-4.png){width=1152}\n:::\n:::\n\n\n## Explosions/Remote Violence\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\nfor(i in seq_along(times)){\n  plot(explosions_st_kde, times[i] ,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"Explosions/Remote Violence STKDE in \",time_labels[i])\n       )\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-86-1.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-86-2.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-86-3.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-86-4.png){width=1152}\n:::\n:::\n\n\n## Strategic Developments\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\nfor(i in seq_along(times)){\n  plot(strategic_st_kde, times[i] ,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"Strategic Developments STKDE in \",time_labels[i])\n       )\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-87-1.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-87-2.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-87-3.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-87-4.png){width=1152}\n:::\n:::\n\n\n## Violence Against Civilians\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\nfor(i in seq_along(times)){\n  plot(civilians_st_kde, times[i] ,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"Violence Against Civilians STKDE in \",time_labels[i])\n       )\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-88-1.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-88-2.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-88-3.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-88-4.png){width=1152}\n:::\n:::\n\n:::\n\n### 5.3.5 Animate the Plot\n\nTo better visualize the spatial-temporal KDE plot, I will use `magick` package in R to convert a sequence of PNG images into a dynamic GIF. Each PNG file represents spatial-temporal KDE plots for different quarters, and I am combining them into an animated GIF that visually depicts changes in data over time. The `magick` package allows me to handle and manipulate these images seamlessly, and I am setting parameters like the frame rate (fps) to control the speed of the animation.\n\n::: panel-tabset\n## Battles\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nfor(i in seq_along(times)){\n   # Define the file path\n  file_path <- paste0(\"data/images/\", time_labels[i], \"_Battles.png\")\n  \n  # Open a PNG device\n  png(file_path, width = 800, height = 600)\n  plot(battles_st_kde, times[i] ,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"Battles STKDE in \",time_labels[i])\n       )\n  dev.off()\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_files <- list.files(\"data/images/\", pattern = \"_Battles\\\\.png\", full.names = TRUE)\nimage_files <- sort(image_files) \n# Read images into a list\nimages <- image_read(image_files)\n\n# Create an animation\nanimation <- image_animate(images, fps = 1)\n\n# Display the animation\nprint(animation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 × 7\n   format width height colorspace matte filesize density\n   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  \n 1 gif      800    600 sRGB       TRUE         0 72x72  \n 2 gif      800    600 sRGB       TRUE         0 72x72  \n 3 gif      800    600 sRGB       TRUE         0 72x72  \n 4 gif      800    600 sRGB       TRUE         0 72x72  \n 5 gif      800    600 sRGB       TRUE         0 72x72  \n 6 gif      800    600 sRGB       TRUE         0 72x72  \n 7 gif      800    600 sRGB       TRUE         0 72x72  \n 8 gif      800    600 sRGB       TRUE         0 72x72  \n 9 gif      800    600 sRGB       TRUE         0 72x72  \n10 gif      800    600 sRGB       TRUE         0 72x72  \n11 gif      800    600 sRGB       TRUE         0 72x72  \n12 gif      800    600 sRGB       TRUE         0 72x72  \n13 gif      800    600 sRGB       TRUE         0 72x72  \n14 gif      800    600 sRGB       TRUE         0 72x72  \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-90-1.gif)\n:::\n:::\n\n\n## Explosions/Remote Violence\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nfor(i in seq_along(times)){\n   # Define the file path\n  file_path <- paste0(\"data/images/\", time_labels[i], \"_Explosions.png\")\n  \n  # Open a PNG device\n  png(file_path, width = 800, height = 600)\n  plot(explosions_st_kde, times[i] ,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"Explosions/Remote Violence STKDE in \",time_labels[i])\n       )\n  dev.off()\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_files <- list.files(\"data/images/\", pattern = \"_Explosions\\\\.png\", full.names = TRUE)\nimage_files <- sort(image_files) \n# Read images into a list\nimages <- image_read(image_files)\n\n# Create an animation\nanimation <- image_animate(images, fps = 1)\n\n# Display the animation\nprint(animation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 × 7\n   format width height colorspace matte filesize density\n   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  \n 1 gif      800    600 sRGB       TRUE         0 72x72  \n 2 gif      800    600 sRGB       TRUE         0 72x72  \n 3 gif      800    600 sRGB       TRUE         0 72x72  \n 4 gif      800    600 sRGB       TRUE         0 72x72  \n 5 gif      800    600 sRGB       TRUE         0 72x72  \n 6 gif      800    600 sRGB       TRUE         0 72x72  \n 7 gif      800    600 sRGB       TRUE         0 72x72  \n 8 gif      800    600 sRGB       TRUE         0 72x72  \n 9 gif      800    600 sRGB       TRUE         0 72x72  \n10 gif      800    600 sRGB       TRUE         0 72x72  \n11 gif      800    600 sRGB       TRUE         0 72x72  \n12 gif      800    600 sRGB       TRUE         0 72x72  \n13 gif      800    600 sRGB       TRUE         0 72x72  \n14 gif      800    600 sRGB       TRUE         0 72x72  \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-92-1.gif)\n:::\n:::\n\n\n## Strategic Developments\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nfor(i in seq_along(times)){\n   # Define the file path\n  file_path <- paste0(\"data/images/\", time_labels[i], \"_Strategic.png\")\n  \n  # Open a PNG device\n  png(file_path, width = 800, height = 600)\n  plot(explosions_st_kde, times[i] ,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"Strategic Developments STKDE in \",time_labels[i])\n       )\n  dev.off()\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_files <- list.files(\"data/images/\", pattern = \"_Strategic\\\\.png\", full.names = TRUE)\nimage_files <- sort(image_files) \n# Read images into a list\nimages <- image_read(image_files)\n\n# Create an animation\nanimation <- image_animate(images, fps = 1)\n\n# Display the animation\nprint(animation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 × 7\n   format width height colorspace matte filesize density\n   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  \n 1 gif      800    600 sRGB       TRUE         0 72x72  \n 2 gif      800    600 sRGB       TRUE         0 72x72  \n 3 gif      800    600 sRGB       TRUE         0 72x72  \n 4 gif      800    600 sRGB       TRUE         0 72x72  \n 5 gif      800    600 sRGB       TRUE         0 72x72  \n 6 gif      800    600 sRGB       TRUE         0 72x72  \n 7 gif      800    600 sRGB       TRUE         0 72x72  \n 8 gif      800    600 sRGB       TRUE         0 72x72  \n 9 gif      800    600 sRGB       TRUE         0 72x72  \n10 gif      800    600 sRGB       TRUE         0 72x72  \n11 gif      800    600 sRGB       TRUE         0 72x72  \n12 gif      800    600 sRGB       TRUE         0 72x72  \n13 gif      800    600 sRGB       TRUE         0 72x72  \n14 gif      800    600 sRGB       TRUE         0 72x72  \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-94-1.gif)\n:::\n:::\n\n\n## Violence Against Civilians\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nfor(i in seq_along(times)){\n   # Define the file path\n  file_path <- paste0(\"data/images/\", time_labels[i], \"_Civilians.png\")\n  \n  # Open a PNG device\n  png(file_path, width = 800, height = 600)\n  plot(explosions_st_kde, times[i] ,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"Violence Against Civilians STKDE in \",time_labels[i])\n       )\n  dev.off()\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_files <- list.files(\"data/images/\", pattern = \"_Civilians\\\\.png\", full.names = TRUE)\nimage_files <- sort(image_files) \n# Read images into a list\nimages <- image_read(image_files)\n\n# Create an animation\nanimation <- image_animate(images, fps = 1)\n\n# Display the animation\nprint(animation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 × 7\n   format width height colorspace matte filesize density\n   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  \n 1 gif      800    600 sRGB       TRUE         0 72x72  \n 2 gif      800    600 sRGB       TRUE         0 72x72  \n 3 gif      800    600 sRGB       TRUE         0 72x72  \n 4 gif      800    600 sRGB       TRUE         0 72x72  \n 5 gif      800    600 sRGB       TRUE         0 72x72  \n 6 gif      800    600 sRGB       TRUE         0 72x72  \n 7 gif      800    600 sRGB       TRUE         0 72x72  \n 8 gif      800    600 sRGB       TRUE         0 72x72  \n 9 gif      800    600 sRGB       TRUE         0 72x72  \n10 gif      800    600 sRGB       TRUE         0 72x72  \n11 gif      800    600 sRGB       TRUE         0 72x72  \n12 gif      800    600 sRGB       TRUE         0 72x72  \n13 gif      800    600 sRGB       TRUE         0 72x72  \n14 gif      800    600 sRGB       TRUE         0 72x72  \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-96-1.gif)\n:::\n:::\n\n:::\n\n### 5.3.6 Insights\n\n::: callout-tip\n## STKDE Insights\n\n-   In term of conflict density, we can see that for all four event types, conflicts are primarily occur at the central regions (boundary between Sagaing State, Magway State and Mandalay Sate ) and southern regions(Yangon State, Mon State and Kayin State)\n\n-   As for conflict intensity over the years. We can see that the pattern are similar for the four event types. The intensity increasing start from 2021 Q1 and reach peak in 2022 Q4, and then shows a declining trend from 2023 through 2024 Q2.\n\n-   In terms of the correlation between event types, **battles** and **explosions/remote violence** are more closely related, particularly in the southern regions, where the density patterns for both event types are quite similar. On the other hand, **strategic developments** and **violence against civilians** are more aligned with each other, as their patterns and densities show similar trends over the same period.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_ppp <- battles_quarter_ppp[battles_quarter$year_quarter == 2021.00 ]\ncurrent_ppp <- current_ppp[msrb_owin]\ncurrent_ppp.km <- rescale(current_ppp, 1000, \"km\")\ndensity <- density(current_ppp,sigma=bw.ppl)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert density to raster\ncurrent_raster <- raster(density)\n  \nprojection(current_raster) <- CRS(\"+init=EPSG:3414\")\ntm_shape(current_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an empty list to store rasters\nraster_list <- list()\n\n# Calculate density for each time slice and convert to raster\nfor (t in times) {\n  # Filter data for the current time slice\n  current_ppp <- battles_quarter_ppp[battles_quarter$year_quarter == t]\n  \n  # Calculate density\n  density <- density(current_ppp,sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\n  \n  # Convert density to raster\n  current_raster <- raster(density)\n  \n  projection(current_raster) <- CRS(\"+init=EPSG:3414\")\n  tm_shape(current_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n  # Store raster in the list with time as the name\n  #raster_list[[time_labels[which(times == t)]]] <- current_raster\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}