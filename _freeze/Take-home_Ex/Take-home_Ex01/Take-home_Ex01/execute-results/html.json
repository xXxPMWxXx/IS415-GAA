{
  "hash": "253dedbda750deb9dfd718048a796357",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 1: Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar\"\nauthor: \"Pan Mingwei\"\ndate: \"September 5, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# 1. Overview\n\nMillions of people have their lives shattered by armed conflict – wars – every year.\n\nArmed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades.\n\n## 1.1 Objective\n\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, I will apply spatial point patterns analysis methods to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar.\n\n## 1.2 Data\n\n### 1.2.1 Armed Conflict Data\n\nFor the purpose of this assignment, armed conflict data of Myanmar between 2021-2024 from [Armed Conflict Location & Event Data (ACLED)](https://acleddata.com/), an independent, impartial, international non-profit organization collecting data on violent conflict and protest in all countries and territories in the world, should be used.\n\nIn terms of event types, I will focus on at least four main event types, namely: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\n\nIn terms of study period, I will focus on quarterly armed conflict events from January 2021 until June 2024.\n\n### 1.2.2 GIS Data\n\nI will be using [**Myanmar State and Region Boundaries with Sub-regions MIMU v9.4**](http://geonode.themimu.info/layers/geonode%3Ammr_polbnda2_adm1_250k_mimu_1)because it provides more detailed geospatial data, including sub-regions. This will allow me to perform a more granular analysis.\n\n## 1.3 Importing Packages\n\nThe following R packages are used for this assignment:\n\n-   **sf**, for importing, managing and processing geospatial data.\n\n-   **tidyverse**, for importing, wrangling and visualising data.\n\n-   **tmap**, to create thematic maps.\n\n-   **spatstat**, for point pattern analysis.\n\n-   **raster**,to reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,tidyverse,tmap,spatstat,raster)\n```\n:::\n\n\n# 2. Data Wrangling\n\n## 2.1 Aspatial Data\n\n### 2.1.1 Importing Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- read_csv(\"data/aspatial/2021-01-01-2024-06-30-Myanmar.csv\")\n```\n:::\n\n\n### 2.1.2 CRS Adjustment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System: NA\n```\n\n\n:::\n:::\n\n\nAs the current **acled_sf** do not have CRS, which means there is no geometry column in the sf object. Therefore, before we change the CRS, we need to convert the **longitude** and **latitude** columns into a **spatial format**. Since Myanmar is UTM zone 47(EPSG:32647), lets create the geometry column and transform the CRS to `UTM Zone 47N`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs=4326) %>%\n  st_transform(crs = 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            MEMBER[\"World Geodetic System 1984 (G2296)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nWe can see that now the CRS is `UTM Zone 47` now.\n\n### 2.1.3 Check and Clean Aspatial Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(acled_sf, n =1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 29 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 214961 ymin: 2452068 xmax: 214961 ymax: 2452068\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1 × 30\n  event_id_cnty event_date    year time_precision disorder_type      event_type\n  <chr>         <chr>        <dbl>          <dbl> <chr>              <chr>     \n1 MMR64313      30 June 2024  2024              1 Political violence Battles   \n# ℹ 24 more variables: sub_event_type <chr>, actor1 <chr>, assoc_actor_1 <chr>,\n#   inter1 <dbl>, actor2 <chr>, assoc_actor_2 <chr>, inter2 <dbl>,\n#   interaction <dbl>, civilian_targeting <chr>, iso <dbl>, region <chr>,\n#   country <chr>, admin1 <chr>, admin2 <chr>, admin3 <chr>, location <chr>,\n#   geo_precision <dbl>, source <chr>, source_scale <chr>, notes <chr>,\n#   fatalities <dbl>, tags <chr>, timestamp <dbl>, geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n\nBy checking the data, we can see that the data type for **event_date** was in Character instead of Date. And there is a timestamp field, in order to figure out what is this field for, we need to convert it to human readable as well.\n\nLets convert the data type for **event_date** to Date and **timestamp** to normal date time format, so we handle the field easier at later stage.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  mutate(event_date = dmy(event_date)) %>%\n  mutate(timestamp = as.POSIXct(timestamp, origin = \"1970-01-01\", tz = \"Asia/Yangon\"))\n```\n:::\n\n\nBy looking at the data, it seems that the **timestamp** field was the date time when the data was recorded. Therefore, this field would not be useful for us.\n\n### 2.1.4 Data Transformation\n\nSince we will be focus on quarterly, lets extract **year** and **quarter** from **event_date** field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  mutate(year = year(event_date),\n         quarter = quarter(event_date))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n event_id_cnty        event_date              year      time_precision \n Length:42608       Min.   :2021-01-01   Min.   :2021   Min.   :1.000  \n Class :character   1st Qu.:2022-01-10   1st Qu.:2022   1st Qu.:1.000  \n Mode  :character   Median :2022-10-13   Median :2022   Median :1.000  \n                    Mean   :2022-10-29   Mean   :2022   Mean   :1.053  \n                    3rd Qu.:2023-08-29   3rd Qu.:2023   3rd Qu.:1.000  \n                    Max.   :2024-06-30   Max.   :2024   Max.   :3.000  \n disorder_type       event_type        sub_event_type        actor1         \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n assoc_actor_1          inter1         actor2          assoc_actor_2     \n Length:42608       Min.   :1.000   Length:42608       Length:42608      \n Class :character   1st Qu.:1.000   Class :character   Class :character  \n Mode  :character   Median :1.000   Mode  :character   Mode  :character  \n                    Mean   :1.947                                        \n                    3rd Qu.:3.000                                        \n                    Max.   :8.000                                        \n     inter2       interaction    civilian_targeting      iso     \n Min.   :0.000   Min.   :10.00   Length:42608       Min.   :104  \n 1st Qu.:1.000   1st Qu.:13.00   Class :character   1st Qu.:104  \n Median :3.000   Median :17.00   Mode  :character   Median :104  \n Mean   :3.597   Mean   :18.86                      Mean   :104  \n 3rd Qu.:7.000   3rd Qu.:17.00                      3rd Qu.:104  \n Max.   :8.000   Max.   :80.00                      Max.   :104  \n    region            country             admin1             admin2         \n Length:42608       Length:42608       Length:42608       Length:42608      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    admin3            location         geo_precision      source         \n Length:42608       Length:42608       Min.   :1.000   Length:42608      \n Class :character   Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Mode  :character   Median :1.000   Mode  :character  \n                                       Mean   :1.495                     \n                                       3rd Qu.:2.000                     \n                                       Max.   :3.000                     \n source_scale          notes             fatalities         tags          \n Length:42608       Length:42608       Min.   :  0.00   Length:42608      \n Class :character   Class :character   1st Qu.:  0.00   Class :character  \n Mode  :character   Mode  :character   Median :  0.00   Mode  :character  \n                                       Mean   :  1.27                     \n                                       3rd Qu.:  1.00                     \n                                       Max.   :201.00                     \n   timestamp                               geometry        quarter     \n Min.   :2021-01-19 23:11:26.00   POINT        :42608   Min.   :1.000  \n 1st Qu.:2023-12-12 07:49:10.00   epsg:32647   :    0   1st Qu.:2.000  \n Median :2024-04-24 01:54:16.00   +proj=utm ...:    0   Median :2.000  \n Mean   :2023-12-06 06:04:20.38                         Mean   :2.475  \n 3rd Qu.:2024-06-26 04:30:11.00                         3rd Qu.:4.000  \n Max.   :2024-09-04 08:18:12.00                         Max.   :4.000  \n```\n\n\n:::\n:::\n\n\n#### 2.1.4.1 Handling Categorical Data\n\nSince there are fields in the dataset are categorical related fields and they are in character vectors. To make sure consistency of the data, we can use `as.factor` function to convert the variable to categorical variable. These fields are: **disorder_type**, **event_type**, **sub_event_type**, **actor1**, **actor2**, **admin1** , **source_scale** etc.\n\nBy doing so, it makes easier to group and summarize data by categories and will provide more consistent behavior.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- acled_sf %>%\n  mutate( event_type = as.factor(event_type),\n          admin1 = as.factor(admin1)\n         )\n```\n:::\n\n\n::: callout-note\nAs there are other categorical fields, but since not all the field will be used and useful(as some of the field have too many level), hence I only factor fields that will be useful for the next stage.\n:::\n\nTo check the levels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(acled_sf$event_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Battles\"                    \"Explosions/Remote violence\"\n[3] \"Strategic developments\"     \"Violence against civilians\"\n```\n\n\n:::\n:::\n\n\n#### 2.1.4.2 Group The Data\n\nNow we can group the data by event type, year and quarter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter by Event Types\nevent_types_of_interest <- c(\"Battles\", \"Explosions/Remote violence\", \"Strategic developments\", \"Violence against civilians\")\n\ngrouped_data <- acled_sf %>%\n  filter(event_date >= as.Date(\"2021-01-01\") & event_date <= as.Date(\"2024-06-30\")\n         & event_type %in% event_types_of_interest) %>%\n  group_by(event_type, year, quarter) %>%\n  summarize(event_count = n())\n\nprint(grouped_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 56 features and 4 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 56 × 5\n# Groups:   event_type, year [16]\n   event_type  year quarter event_count                                 geometry\n   <fct>      <dbl>   <int>       <int>                         <MULTIPOINT [m]>\n 1 Battles     2021       1         148 ((-203795.3 2372607), (-10581.74 255763…\n 2 Battles     2021       2         646 ((-191409.1 2317222), (-72946.86 252090…\n 3 Battles     2021       3         593 ((-173272.7 2322073), (-92733.64 254436…\n 4 Battles     2021       4         847 ((-200024.3 2345207), (-195636.2 235992…\n 5 Battles     2022       1         987 ((-204784 2358873), (-195914.6 2357792)…\n 6 Battles     2022       2        1019 ((-141557.3 2368713), (-138595 2239402)…\n 7 Battles     2022       3         983 ((-204784 2358873), (-201788.2 2366580)…\n 8 Battles     2022       4         839 ((-202593.1 2350220), (-201925.4 235410…\n 9 Battles     2023       1         856 ((-191409.1 2317222), (-138595 2239402)…\n10 Battles     2023       2         814 ((-174035.7 2284958), (-152179.1 227725…\n# ℹ 46 more rows\n```\n\n\n:::\n:::\n\n\n## 2.2 Geospatial Data\n\n### 2.2.1 Importing Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsrb_sub_reg <- st_read(dsn = \"data/geospatial/mmr_polbnda2_adm1_250k_mimu_1\", layer = \"mmr_polbnda2_adm1_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `/Users/mingwei/Desktop/SMU/Y3S1/IS415/xXxPMWxXx/IS415-GAA/Take-home_Ex/Take-home_Ex01/data/geospatial/mmr_polbnda2_adm1_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n### 2.2.2 CRS Adjustments\n\nLets check what is the CRS for `msrb_sub_reg`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(msrb_sub_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\nAs from above, we can see that the original data is geographic coordinate system. We need to convert it to projected coordinate system. Since Myanmar is UTM zone 47(EPSG:32647), lets transform the CRS to `UTM Zone 47N`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsrb_sub_reg <- st_transform(msrb_sub_reg, crs = 32647)\nst_crs(msrb_sub_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            MEMBER[\"World Geodetic System 1984 (G2296)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n### 2.2.3 Check and Clean Geospatial Data\n\nTo ensure that the geometries in the shapefile are valid and correct them if any invalid geometries found.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check if the data are valid\nst_is_valid(msrb_sub_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Fix invalid data\nmsrb_sub_reg <- st_make_valid(msrb_sub_reg)\n```\n:::\n\n\n### 2.2.4 Standardize Column Names\n\nWe can see that the column name are not descriptive.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsrb_sub_reg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 18 features and 6 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -210008.6 ymin: 1072026 xmax: 724647.6 ymax: 3158467\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n   OBJECTID          ST ST_PCODE  ST_RG               ST_MMR PCode_V\n1         1  Ayeyarwady   MMR017 Region       ဧရာဝတီတိုင်းဒေသကြီး     9.4\n2         2 Bago (East)   MMR007 Region   ပဲခူးတိုင်းဒေသကြီး (အရှေ့)     9.4\n3         3 Bago (West)   MMR008 Region ပဲခူးတိုင်းဒေသကြီး (အနောက်)     9.4\n4         4        Chin   MMR004  State            ချင်းပြည်နယ်     9.4\n5         5      Kachin   MMR001  State            ကချင်ပြည်နယ်     9.4\n6         6       Kayah   MMR002  State            ကယားပြည်နယ်     9.4\n7         7       Kayin   MMR003  State             ကရင်ပြည်နယ်     9.4\n8         8      Magway   MMR009 Region        မကွေးတိုင်းဒေသကြီး     9.4\n9         9    Mandalay   MMR010 Region      မန္တလေးတိုင်းဒေသကြီး     9.4\n10       10         Mon   MMR011  State              မွန်ပြည်နယ်     9.4\n                         geometry\n1  MULTIPOLYGON (((-5792.088 1...\n2  POLYGON ((203949.9 2157841,...\n3  POLYGON ((153405.1 2125288,...\n4  POLYGON ((-72918.03 2675831...\n5  POLYGON ((362696.3 3156293,...\n6  POLYGON ((309155.7 2211716,...\n7  MULTIPOLYGON (((373550.1 18...\n8  POLYGON ((-1717.607 2525523...\n9  POLYGON ((208184.3 2614332,...\n10 MULTIPOLYGON (((350576.4 17...\n```\n\n\n:::\n:::\n\n\nRename the column name to more descriptive name and remove not useful column .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsrb_sub_reg <- msrb_sub_reg %>%\n  rename(state_name = ST,\n         state_pcode = ST_PCODE,\n         state_region = ST_RG) %>%\n  dplyr::select(-ST_MMR)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(msrb_sub_reg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    OBJECTID      state_name        state_pcode        state_region      \n Min.   : 1.00   Length:18          Length:18          Length:18         \n 1st Qu.: 5.25   Class :character   Class :character   Class :character  \n Median : 9.50   Mode  :character   Mode  :character   Mode  :character  \n Mean   : 9.50                                                           \n 3rd Qu.:13.75                                                           \n Max.   :18.00                                                           \n    PCode_V             geometry \n Min.   :9.4   MULTIPOLYGON : 6  \n 1st Qu.:9.4   POLYGON      :12  \n Median :9.4   epsg:32647   : 0  \n Mean   :9.4   +proj=utm ...: 0  \n 3rd Qu.:9.4                     \n Max.   :9.4                     \n```\n\n\n:::\n:::\n\n\n### 2.2.5 Myanmar Boundaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(msrb_sub_reg))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=1152}\n:::\n:::\n\n\n# 3 Kernel Density Estimation\n\n## 3.1 Remove island\n\nAs we can see from above, the Myanmar boundaries have many islands, which will affect us as when plot the points. Therefore, by removing smaller island,it will help us in visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge adj polygons\nmerged_msrb <- st_union(msrb_sub_reg) %>%\n  st_cast(\"POLYGON\")\n# Convert back to sf object\nmerged_msrb <- st_as_sf(merged_msrb)\n# set threshold\nmin_area_threshold <- units::set_units(100, \"km^2\")\n\nareas <- st_area(merged_msrb)\n\n# Filter out polygons smaller than the threshold\nfiltered_msrb <- merged_msrb %>% \n  filter(areas > min_area_threshold)\n\nplot(st_geometry(filtered_msrb), main = \"Without Small Islands\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=1152}\n:::\n:::\n\n\n## 3.2 Create owin Object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsrb_owin <- as.owin(filtered_msrb)\nplot(msrb_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=1152}\n:::\n:::\n\n\n## 3.3 Determine Best Sigma And Kernel\n\nTo find out which sigma and kernel to use for KDE, we will try various type and see which give us the best visualization. We will use data that is battles event in 2021 Q1 as the sample data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021_Q1 <- grouped_data %>%\n  filter(event_type == 'Battles' & year == 2021 & quarter == 1)\n\nbattles_2021_Q1_ppp <- as.ppp(st_coordinates(battles_2021_Q1), st_bbox(battles_2021_Q1))\nany(duplicated(battles_2021_Q1_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021_Q1_ppp = battles_2021_Q1_ppp[msrb_owin]\nplot(battles_2021_Q1_ppp, pch = 20, cex = 1)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=1152}\n:::\n:::\n\n\nTo check the default bandwidth.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw <- bw.diggle(battles_2021_Q1_ppp)\nbw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n21948.87 \n```\n\n\n:::\n:::\n\n\nTo rescale the unit and compare fixed and adaptive bandwidth.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021_Q1_ppp = battles_2021_Q1_ppp[msrb_owin]\n\n# Rescale the measurement unit\nbattles_2021_Q1_ppp.km <- rescale(battles_2021_Q1_ppp, 50000, \"km\")\nkde_battles_2021_Q1_ppp <- density(battles_2021_Q1_ppp.km,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\nkde_battles_2021_Q1_adaptive <- adaptive.density(battles_2021_Q1_ppp.km, method=\"kernel\")\n\npar(mfrow=c(1,2))\nplot(kde_battles_2021_Q1_ppp, main = \"Battles 2021 Q1 Fixed bandwidth\")\nplot(kde_battles_2021_Q1_adaptive, main = \"Battles 2021 Q1 Adaptive bandwidth\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-26-1.png){width=1152}\n:::\n:::\n\n\n::: callout-note\nAs there is no significant differences between fixed and adaptive bandwidth, we will use fixed bandwidth for our analysis.\n:::\n\n### 3.3.1 Comparing Different Sigma\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))  # adjust the margin values\n\nplot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = \"gaussian\"), main = \"PPL\")\nplot(density(battles_2021_Q1_ppp.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\"), main = \"CvL\")\nplot(density(battles_2021_Q1_ppp.km, sigma = bw.scott, edge = TRUE, kernel = \"gaussian\"), main = \"Scott\")\nplot(density(battles_2021_Q1_ppp.km, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\"), main = \"Diggle\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=1152}\n:::\n:::\n\n\n::: callout-note\nAs can be seen above, among the four types of sigma, `PPL` provides the best visualization. Both Scott and CvL methods result in too much spread, while Diggle makes it difficult to see the points in the bottom part of the plot.\n:::\n\n### 3.3.2 Comparing Different Kernel\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\npar(mar = c(3, 3, 2, 1))\n\nplot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = \"gaussian\"), main = \"Gaussian\")\nplot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = \"epanechnikov\"), main = \"Epanechnikov\")\nplot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = \"quartic\"), main = \"Quartic\")\nplot(density(battles_2021_Q1_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = \"disc\"), main = \"Disc\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=1152}\n:::\n:::\n\n\n::: callout-note\nAmong the four kernels, the `Gaussian` kernel provides the smoothest visualization. Therefore, we will use Gaussian kernel for our analysis.\n:::\n\n## 3.4 Battles\n\nRe-use the variable name to save memory.\n\n::: panel-tabset\n## 2021 Q1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021 <- grouped_data %>%\n  filter(event_type == 'Battles' & year == 2021 & quarter == 1)\n\nbattles_2021_ppp <- as.ppp(st_coordinates(battles_2021), st_bbox(battles_2021))\nany(duplicated(battles_2021_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021_ppp = battles_2021_ppp[msrb_owin]\nbattles_2021_ppp.km <- rescale(battles_2021_ppp, 50000, \"km\")\nplot(density(battles_2021_ppp.km, \n             sigma = bw.ppl, \n             edge = TRUE, \n             kernel = \"gaussian\"), \n     main = \"2021 Q1 - Battles\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=1152}\n:::\n:::\n\n\n## 2021 Q2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021 <- grouped_data %>%\n  filter(event_type == 'Battles' & year == 2021 & quarter == 2)\n\nbattles_2021_ppp <- as.ppp(st_coordinates(battles_2021), st_bbox(battles_2021))\nany(duplicated(battles_2021_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021_ppp = battles_2021_ppp[msrb_owin]\nbattles_2021_ppp.km <- rescale(battles_2021_ppp, 50000, \"km\")\nplot(density(battles_2021_ppp.km, \n             sigma = bw.ppl, \n             edge = TRUE, \n             kernel = \"gaussian\"), \n     main = \"2021 Q2 - Battles\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=1152}\n:::\n:::\n\n\n## 2021 Q3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021 <- grouped_data %>%\n  filter(event_type == 'Battles' & year == 2021 & quarter == 3)\n\nbattles_2021_ppp <- as.ppp(st_coordinates(battles_2021), st_bbox(battles_2021))\nany(duplicated(battles_2021_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021_ppp = battles_2021_ppp[msrb_owin]\nbattles_2021_ppp.km <- rescale(battles_2021_ppp, 50000, \"km\")\nplot(density(battles_2021_ppp.km, \n             sigma = bw.ppl, \n             edge = TRUE, \n             kernel = \"gaussian\"), \n     main = \"2021 Q3 - Battles\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=1152}\n:::\n:::\n\n\n## 2021 Q4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021 <- grouped_data %>%\n  filter(event_type == 'Battles' & year == 2021 & quarter == 4)\n\nbattles_2021_ppp <- as.ppp(st_coordinates(battles_2021), st_bbox(battles_2021))\nany(duplicated(battles_2021_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_2021_ppp = battles_2021_ppp[msrb_owin]\nbattles_2021_ppp.km <- rescale(battles_2021_ppp, 50000, \"km\")\nplot(density(battles_2021_ppp.km, \n             sigma = bw.ppl, \n             edge = TRUE, \n             kernel = \"gaussian\"), \n     main = \"2021 Q4 - Battles\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-36-1.png){width=1152}\n:::\n:::\n\n:::\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}