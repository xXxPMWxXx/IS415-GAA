{
  "hash": "81470065080f076b3560b79bf4b8e1fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 03: Prototyping Modules for Geospatial Analytics Shiny Application\"\nauthor: \"Pan Mingwei\"\ndate: \"October 18, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  cache: true\n  freeze: true\nformat: \n  html: \n    code-fold: false\n    code-summary: \"Click to expand/collapse code\"\n---\n\n\n\n# 1. Overview\n\nIn this take-home exercise, I will focus on prototyping Geographically Weighted Regression (GWR) models for my group’s Shiny App. GWR is a spatial statistical method that accounts for non-stationary variables (such as climate, demographics, and physical environment characteristics) and models the local relationships between these independent variables and the outcome of interest. In this case, the dependent variable is the resale price of HDB flats in Singapore, and I will examine how factors such as flat size, proximity to MRT and CBD, remaining lease, storey height, and more influence HDB resale prices.The data preparation and Exploratory Data Analysis were handled by my groupmate, so for this exercise, I will load the data directly from an RDS file.\n\n# 2 The R-Packages\n\n-   `tidyverse`: attribute data handling\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n```\n:::\n\n\n\n# 3. The Data\n\n## 3.1 Aspatial Data\n\nFirst, import the resale dataset, as the data wrangling was done by teammate. Please refer to [here](https://is415-gaa-georgia-ng.netlify.app/take-home_ex/take-home_ex03/take-home_ex03) for details.\n\n-   **`resale.sf`** =\\> contains the resale data from Jan 2020 to Sept 2024, as well as other fields like:\n\n    -   Dependent:\n\n        -   Resale Price: `resale_price`, `price_per_sqft`\n\n    -   Continuous:\n\n        -   Remaining Lease: `remaining_lease_total_months`\n\n        -   Size of flat: `floor_area_sqft`\n\n        -   Distance to transport: `distance_to_mrt_meters`\n\n        -   Distance to amenities: `distance_to_pri_school_meters`\n\n        -   Distance to central business district: `distance_to_cbd`\n\n    -   Categorical:\n\n        -   Remaining Lease: `remaining_lease_period`\n\n        -   Storey Height Group: `storey_range_grouped`\n\n        -   Housing Type: `housing_type`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale.sf <- read_rds(\"data/rds/resale_5yr_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(resale.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 20 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 28911.05 ymin: 38571.11 xmax: 30705.05 ymax: 39607.85\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 21\n  month      storey_range resale_price floor_area_sqft price_per_sqft\n  <date>     <chr>               <dbl>           <dbl>          <dbl>\n1 2020-01-01 04 TO 06           265000            786.           337.\n2 2020-01-01 19 TO 21           470000            753.           624.\n3 2020-01-01 01 TO 03           230000            786.           293.\n4 2020-01-01 04 TO 06           280000            786.           356.\n5 2020-01-01 07 TO 09           220000            732.           301.\n6 2020-01-01 10 TO 12           280000            732.           383.\n# ℹ 16 more variables: planning_area_ura <chr>, region_ura <chr>, x <dbl>,\n#   y <dbl>, closest_mrt_station <chr>, distance_to_mrt_meters <dbl>,\n#   transport_type <chr>, line_color <chr>, distance_to_cbd <dbl>,\n#   closest_pri_school <chr>, distance_to_pri_school_meters <dbl>,\n#   geometry <POINT [m]>, housing_type <chr>,\n#   remaining_lease_total_months <dbl>, remaining_lease_range <fct>,\n#   storey_range_grouped <chr>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(resale.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\n\nNotice that our `resale.sf` was in EPSG 3414.\n\n## 3.2 Geospatial Data\n\nUsing `st_read()` of **sf** package to import the MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/mingwei/Desktop/SMU/Y3S1/IS415/xXxPMWxXx/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\nAs the aspatial data we going to use was in EPSG=3414, the code chunk below will transform mpsz object to ESPG code = 3414 using `st_transform()` method of **sf** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_svy21 <- st_transform(mpsz, 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz_svy21)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\n\nNotice that the EPSG is now in 3414, same as `resale.sf`. We are good to go.\n\n# 4. Hedonic Pricing Modelling\n\n## 4.1 Simple Linear Regression Method\n\nTo start off, lest build a simple linear regression model by using `resale_price` as the dependent variable and `floor_area_sqft` as the independent variable.\n\n::: callout-note\nI will try out simple linear regression, but I won’t dive deeply into it, as this method will not be part of our Shiny App. Instead, I will focus more on multiple linear regression and building Hedonic Pricing Models using the GWmodel package in the next section. Which I will explore the different arguments available so that we can include them in our Shiny App.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb.slr <- lm(formula=resale_price ~ floor_area_sqft, data = resale.sf)\n```\n:::\n\n\n\n`lm()` returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\n\nThe functions `summary()` and `anova()` can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by `lm`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(hdb.slr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = resale_price ~ floor_area_sqft, data = resale.sf)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-394987  -87668  -26780   55020  980977 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)     94483.917   1628.497   58.02   <2e-16 ***\nfloor_area_sqft   425.147      1.519  279.95   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 139000 on 126466 degrees of freedom\nMultiple R-squared:  0.3826,\tAdjusted R-squared:  0.3826 \nF-statistic: 7.837e+04 on 1 and 126466 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\nThe output report reveals that the `resale_price` can be explained by using the formula:\n\nresale_price = 94483.917 + 425.147(floor_area_sqft)\n\nThe coefficients section, the p-value for the hypothesis test that the coefficient is equal to zero. Since both values are less than 0.001, both the intercept and the floor area are statistically significant \n\nWith the multiple R-squared of 0.3826, Indicates that about **38.26%** of the variability in resale prices is explained by the model. This suggests that other factors likely influence resale prices, as over 60% of the variability remains unexplained.\n\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of `resale_price`. This will allow us to infer that simple linear regression model above is a good estimator of `resale_price`.\n\nTo visualise the best fit curve on a scatterplot, we can incorporate `lm()` as a method function in ggplot’s geometry as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data=resale.sf,  \n       aes(x=`floor_area_sqft`, y=`resale_price`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-10-1.png){width=1152}\n:::\n:::\n\n\n\n## 4.2 Multiple Linear Regression\n\n### 4.2.1 Visualising the Relationships of the Independent Variables\n\nBefore constructing a multiple regression model, it’s crucial to verify that the independent variables are not highly correlated with one another. Using highly correlated independent variables by mistake can undermine the model’s quality. This issue is referred to as multicollinearity in statistics.\n\nA correlation matrix is often utilized to visualize the relationships among independent variables. In addition to R’s pairs() function, there are several packages available that facilitate the display of a correlation matrix. In this section, we will use the corrplot package.\n\nFirst, lets check the column for the `resale.sf`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(resale.sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"month\"                         \"storey_range\"                 \n [3] \"resale_price\"                  \"floor_area_sqft\"              \n [5] \"price_per_sqft\"                \"planning_area_ura\"            \n [7] \"region_ura\"                    \"x\"                            \n [9] \"y\"                             \"closest_mrt_station\"          \n[11] \"distance_to_mrt_meters\"        \"transport_type\"               \n[13] \"line_color\"                    \"distance_to_cbd\"              \n[15] \"closest_pri_school\"            \"distance_to_pri_school_meters\"\n[17] \"geometry\"                      \"housing_type\"                 \n[19] \"remaining_lease_total_months\"  \"remaining_lease_range\"        \n[21] \"storey_range_grouped\"         \n```\n\n\n:::\n:::\n\n\n\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in `resale.sf` data.frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_columns <- resale.sf %>% select(floor_area_sqft, distance_to_mrt_meters, distance_to_cbd,distance_to_pri_school_meters,remaining_lease_total_months) %>%\n  st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(cor(selected_columns), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nAfter checking the documentation for **corrplot** packages. There are different input/option for the arguments such as:\n\n-   `method`\n\n    -   circle (default)\n\n    -   square\n\n    -   ellipse\n\n    -   number\n\n    -   pie\n\n    -   shade\n\n    -   color\n\n-   `type`\n\n    -   full (default)\n\n    -   upper\n\n    -   lower\n\n-   `order`\n\n    -   original (default) =\\> orginal order\n\n    -   AOE =\\> angular order of the eigenvectors\n\n    -   FPC =\\> first principal component order\n\n    -   hclust =\\> for the hierarchical clustering order\n\n        -   `hclust.method`: when the order is hclust, the below method can be define\n\n            -   'ward' , ward.D', 'ward.D2', 'single', 'complete', 'average', 'mcquitty', 'median' or 'centroid'\n\n    -   alphabet =\\> alphabetical order\n\nThe arguments mentioned above can be user inputs in our Shiny App, allowing users to interactively explore the relationships among the independent variables.\n\n![](website_image/ui_correlation.jpg)\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}